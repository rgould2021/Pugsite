{"ast":null,"code":"import _regeneratorRuntime from \"/Users/rickygould/Documents/Github/Pug-Website/Downloads/web102_unit7lab-main/client/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n}; // @ts-ignore\n\n\nimport nodeFetch, { Headers as NodeFetchHeaders } from '@supabase/node-fetch';\nexport var resolveFetch = function resolveFetch(customFetch) {\n  var _fetch;\n\n  if (customFetch) {\n    _fetch = customFetch;\n  } else if (typeof fetch === 'undefined') {\n    _fetch = nodeFetch;\n  } else {\n    _fetch = fetch;\n  }\n\n  return function () {\n    return _fetch.apply(void 0, arguments);\n  };\n};\nexport var resolveHeadersConstructor = function resolveHeadersConstructor() {\n  if (typeof Headers === 'undefined') {\n    return NodeFetchHeaders;\n  }\n\n  return Headers;\n};\nexport var fetchWithAuth = function fetchWithAuth(supabaseKey, getAccessToken, customFetch) {\n  var fetch = resolveFetch(customFetch);\n  var HeadersConstructor = resolveHeadersConstructor();\n  return function (input, init) {\n    return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n      var _a, accessToken, headers;\n\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return getAccessToken();\n\n            case 2:\n              _context.t1 = _a = _context.sent;\n              _context.t0 = _context.t1 !== null;\n\n              if (!_context.t0) {\n                _context.next = 6;\n                break;\n              }\n\n              _context.t0 = _a !== void 0;\n\n            case 6:\n              if (!_context.t0) {\n                _context.next = 10;\n                break;\n              }\n\n              _context.t2 = _a;\n              _context.next = 11;\n              break;\n\n            case 10:\n              _context.t2 = supabaseKey;\n\n            case 11:\n              accessToken = _context.t2;\n              headers = new HeadersConstructor(init === null || init === void 0 ? void 0 : init.headers);\n\n              if (!headers.has('apikey')) {\n                headers.set('apikey', supabaseKey);\n              }\n\n              if (!headers.has('Authorization')) {\n                headers.set('Authorization', \"Bearer \".concat(accessToken));\n              }\n\n              return _context.abrupt(\"return\", fetch(input, Object.assign(Object.assign({}, init), {\n                headers: headers\n              })));\n\n            case 16:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n  };\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAAA;;;AACA,OAAOA,SAAP,IAAoBC,OAAO,IAAIC,gBAA/B,QAAuD,sBAAvD;AAIA,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,WAAD,EAA+B;EACzD,IAAIC,MAAJ;;EACA,IAAID,WAAJ,EAAiB;IACfC,MAAM,GAAGD,WAAT;EACD,CAFD,MAEO,IAAI,OAAOE,KAAP,KAAiB,WAArB,EAAkC;IACvCD,MAAM,GAAGL,SAAT;EACD,CAFM,MAEA;IACLK,MAAM,GAAGC,KAAT;EACD;;EACD,OAAO;IAAA,OAAgCD,MAAM,MAAN,mBAAhC;EAAA,CAAP;AACD,CAVM;AAYP,OAAO,IAAME,yBAAyB,GAAG,SAA5BA,yBAA4B,GAAK;EAC5C,IAAI,OAAON,OAAP,KAAmB,WAAvB,EAAoC;IAClC,OAAOC,gBAAP;EACD;;EAED,OAAOD,OAAP;AACD,CANM;AAQP,OAAO,IAAMO,aAAa,GAAG,SAAhBA,aAAgB,CAC3BC,WAD2B,EAE3BC,cAF2B,EAG3BN,WAH2B,EAIlB;EACT,IAAME,KAAK,GAAGH,YAAY,CAACC,WAAD,CAA1B;EACA,IAAMO,kBAAkB,GAAGJ,yBAAyB,EAApD;EAEA,OAAO,UAAOK,KAAP,EAAcC,IAAd;IAAA,OAAsBC;MAAA;;MAAA;QAAA;UAAA;YAAA;cAAA;cACN,OAAMJ,cAAc,EAApB;;YADM;cAAA,cACPK,EADO;cAAA,8BACiB,IADjB;;cAAA;gBAAA;gBAAA;cAAA;;cAAA,cACiBA,aADjB;;YAAA;cAAA;gBAAA;gBAAA;cAAA;;cAAA,cACiBA,EADjB;cAAA;cAAA;;YAAA;cAAA,cACqBN,WADrB;;YAAA;cACrBO,WADqB;cAEvBC,OAFuB,GAEb,IAAIN,kBAAJ,CAAuBE,IAAI,SAAJ,QAAI,WAAJ,GAAI,MAAJ,OAAI,CAAEI,OAA7B,CAFa;;cAI3B,IAAI,CAACA,OAAO,CAACC,GAAR,CAAY,QAAZ,CAAL,EAA4B;gBAC1BD,OAAO,CAACE,GAAR,CAAY,QAAZ,EAAsBV,WAAtB;cACD;;cAED,IAAI,CAACQ,OAAO,CAACC,GAAR,CAAY,eAAZ,CAAL,EAAmC;gBACjCD,OAAO,CAACE,GAAR,CAAY,eAAZ,mBAAuCH,WAAvC;cACD;;cAV0B,iCAYpBV,KAAK,CAACM,KAAD,EAAMQ,gCAAOP,IAAP,GAAW;gBAAEI,OAAO,EAAPA;cAAF,CAAX,CAAN,CAZe;;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,GAAtB;EAAA,CAAP;AAcD,CAtBM","names":["nodeFetch","Headers","NodeFetchHeaders","resolveFetch","customFetch","_fetch","fetch","resolveHeadersConstructor","fetchWithAuth","supabaseKey","getAccessToken","HeadersConstructor","input","init","__awaiter","_a","accessToken","headers","has","set","Object"],"sources":["/Users/rickygould/Documents/Github/Pug-Website/Downloads/web102_unit7lab-main/client/node_modules/@supabase/supabase-js/src/lib/fetch.ts"],"sourcesContent":["// @ts-ignore\nimport nodeFetch, { Headers as NodeFetchHeaders } from '@supabase/node-fetch'\n\ntype Fetch = typeof fetch\n\nexport const resolveFetch = (customFetch?: Fetch): Fetch => {\n  let _fetch: Fetch\n  if (customFetch) {\n    _fetch = customFetch\n  } else if (typeof fetch === 'undefined') {\n    _fetch = nodeFetch as unknown as Fetch\n  } else {\n    _fetch = fetch\n  }\n  return (...args: Parameters<Fetch>) => _fetch(...args)\n}\n\nexport const resolveHeadersConstructor = () => {\n  if (typeof Headers === 'undefined') {\n    return NodeFetchHeaders\n  }\n\n  return Headers\n}\n\nexport const fetchWithAuth = (\n  supabaseKey: string,\n  getAccessToken: () => Promise<string | null>,\n  customFetch?: Fetch\n): Fetch => {\n  const fetch = resolveFetch(customFetch)\n  const HeadersConstructor = resolveHeadersConstructor()\n\n  return async (input, init) => {\n    const accessToken = (await getAccessToken()) ?? supabaseKey\n    let headers = new HeadersConstructor(init?.headers)\n\n    if (!headers.has('apikey')) {\n      headers.set('apikey', supabaseKey)\n    }\n\n    if (!headers.has('Authorization')) {\n      headers.set('Authorization', `Bearer ${accessToken}`)\n    }\n\n    return fetch(input, { ...init, headers })\n  }\n}\n"]},"metadata":{},"sourceType":"module"}