{"ast":null,"code":"import _toConsumableArray from \"/Users/rickygould/Documents/Github/Pug-Website/Downloads/web102_unit7lab-main/client/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _classCallCheck from \"/Users/rickygould/Documents/Github/Pug-Website/Downloads/web102_unit7lab-main/client/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/rickygould/Documents/Github/Pug-Website/Downloads/web102_unit7lab-main/client/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport PostgrestFilterBuilder from './PostgrestFilterBuilder';\n\nvar PostgrestQueryBuilder = /*#__PURE__*/function () {\n  function PostgrestQueryBuilder(url, _ref) {\n    var _ref$headers = _ref.headers,\n        headers = _ref$headers === void 0 ? {} : _ref$headers,\n        schema = _ref.schema,\n        fetch = _ref.fetch;\n\n    _classCallCheck(this, PostgrestQueryBuilder);\n\n    this.url = url;\n    this.headers = headers;\n    this.schema = schema;\n    this.fetch = fetch;\n  }\n  /**\n   * Perform a SELECT query on the table or view.\n   *\n   * @param columns - The columns to retrieve, separated by commas. Columns can be renamed when returned with `customName:columnName`\n   *\n   * @param options - Named parameters\n   *\n   * @param options.head - When set to `true`, `data` will not be returned.\n   * Useful if you only need the count.\n   *\n   * @param options.count - Count algorithm to use to count rows in the table or view.\n   *\n   * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n   * hood.\n   *\n   * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n   * statistics under the hood.\n   *\n   * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n   * numbers.\n   */\n\n\n  _createClass(PostgrestQueryBuilder, [{\n    key: \"select\",\n    value: function select(columns) {\n      var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          _ref2$head = _ref2.head,\n          head = _ref2$head === void 0 ? false : _ref2$head,\n          count = _ref2.count;\n\n      var method = head ? 'HEAD' : 'GET'; // Remove whitespaces except when quoted\n\n      var quoted = false;\n      var cleanedColumns = (columns !== null && columns !== void 0 ? columns : '*').split('').map(function (c) {\n        if (/\\s/.test(c) && !quoted) {\n          return '';\n        }\n\n        if (c === '\"') {\n          quoted = !quoted;\n        }\n\n        return c;\n      }).join('');\n      this.url.searchParams.set('select', cleanedColumns);\n\n      if (count) {\n        this.headers['Prefer'] = \"count=\".concat(count);\n      }\n\n      return new PostgrestFilterBuilder({\n        method: method,\n        url: this.url,\n        headers: this.headers,\n        schema: this.schema,\n        fetch: this.fetch,\n        allowEmpty: false\n      });\n    }\n    /**\n     * Perform an INSERT into the table or view.\n     *\n     * By default, inserted rows are not returned. To return it, chain the call\n     * with `.select()`.\n     *\n     * @param values - The values to insert. Pass an object to insert a single row\n     * or an array to insert multiple rows.\n     *\n     * @param options - Named parameters\n     *\n     * @param options.count - Count algorithm to use to count inserted rows.\n     *\n     * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n     * hood.\n     *\n     * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n     * statistics under the hood.\n     *\n     * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n     * numbers.\n     *\n     * @param options.defaultToNull - Make missing fields default to `null`.\n     * Otherwise, use the default value for the column. Only applies for bulk\n     * inserts.\n     */\n\n  }, {\n    key: \"insert\",\n    value: function insert(values) {\n      var _ref3 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          count = _ref3.count,\n          _ref3$defaultToNull = _ref3.defaultToNull,\n          defaultToNull = _ref3$defaultToNull === void 0 ? true : _ref3$defaultToNull;\n\n      var method = 'POST';\n      var prefersHeaders = [];\n\n      if (this.headers['Prefer']) {\n        prefersHeaders.push(this.headers['Prefer']);\n      }\n\n      if (count) {\n        prefersHeaders.push(\"count=\".concat(count));\n      }\n\n      if (!defaultToNull) {\n        prefersHeaders.push('missing=default');\n      }\n\n      this.headers['Prefer'] = prefersHeaders.join(',');\n\n      if (Array.isArray(values)) {\n        var columns = values.reduce(function (acc, x) {\n          return acc.concat(Object.keys(x));\n        }, []);\n\n        if (columns.length > 0) {\n          var uniqueColumns = _toConsumableArray(new Set(columns)).map(function (column) {\n            return \"\\\"\".concat(column, \"\\\"\");\n          });\n\n          this.url.searchParams.set('columns', uniqueColumns.join(','));\n        }\n      }\n\n      return new PostgrestFilterBuilder({\n        method: method,\n        url: this.url,\n        headers: this.headers,\n        schema: this.schema,\n        body: values,\n        fetch: this.fetch,\n        allowEmpty: false\n      });\n    }\n    /**\n     * Perform an UPSERT on the table or view. Depending on the column(s) passed\n     * to `onConflict`, `.upsert()` allows you to perform the equivalent of\n     * `.insert()` if a row with the corresponding `onConflict` columns doesn't\n     * exist, or if it does exist, perform an alternative action depending on\n     * `ignoreDuplicates`.\n     *\n     * By default, upserted rows are not returned. To return it, chain the call\n     * with `.select()`.\n     *\n     * @param values - The values to upsert with. Pass an object to upsert a\n     * single row or an array to upsert multiple rows.\n     *\n     * @param options - Named parameters\n     *\n     * @param options.onConflict - Comma-separated UNIQUE column(s) to specify how\n     * duplicate rows are determined. Two rows are duplicates if all the\n     * `onConflict` columns are equal.\n     *\n     * @param options.ignoreDuplicates - If `true`, duplicate rows are ignored. If\n     * `false`, duplicate rows are merged with existing rows.\n     *\n     * @param options.count - Count algorithm to use to count upserted rows.\n     *\n     * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n     * hood.\n     *\n     * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n     * statistics under the hood.\n     *\n     * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n     * numbers.\n     *\n     * @param options.defaultToNull - Make missing fields default to `null`.\n     * Otherwise, use the default value for the column. This only applies when\n     * inserting new rows, not when merging with existing rows under\n     * `ignoreDuplicates: false`. This also only applies when doing bulk upserts.\n     */\n\n  }, {\n    key: \"upsert\",\n    value: function upsert(values) {\n      var _ref4 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          onConflict = _ref4.onConflict,\n          _ref4$ignoreDuplicate = _ref4.ignoreDuplicates,\n          ignoreDuplicates = _ref4$ignoreDuplicate === void 0 ? false : _ref4$ignoreDuplicate,\n          count = _ref4.count,\n          _ref4$defaultToNull = _ref4.defaultToNull,\n          defaultToNull = _ref4$defaultToNull === void 0 ? true : _ref4$defaultToNull;\n\n      var method = 'POST';\n      var prefersHeaders = [\"resolution=\".concat(ignoreDuplicates ? 'ignore' : 'merge', \"-duplicates\")];\n      if (onConflict !== undefined) this.url.searchParams.set('on_conflict', onConflict);\n\n      if (this.headers['Prefer']) {\n        prefersHeaders.push(this.headers['Prefer']);\n      }\n\n      if (count) {\n        prefersHeaders.push(\"count=\".concat(count));\n      }\n\n      if (!defaultToNull) {\n        prefersHeaders.push('missing=default');\n      }\n\n      this.headers['Prefer'] = prefersHeaders.join(',');\n\n      if (Array.isArray(values)) {\n        var columns = values.reduce(function (acc, x) {\n          return acc.concat(Object.keys(x));\n        }, []);\n\n        if (columns.length > 0) {\n          var uniqueColumns = _toConsumableArray(new Set(columns)).map(function (column) {\n            return \"\\\"\".concat(column, \"\\\"\");\n          });\n\n          this.url.searchParams.set('columns', uniqueColumns.join(','));\n        }\n      }\n\n      return new PostgrestFilterBuilder({\n        method: method,\n        url: this.url,\n        headers: this.headers,\n        schema: this.schema,\n        body: values,\n        fetch: this.fetch,\n        allowEmpty: false\n      });\n    }\n    /**\n     * Perform an UPDATE on the table or view.\n     *\n     * By default, updated rows are not returned. To return it, chain the call\n     * with `.select()` after filters.\n     *\n     * @param values - The values to update with\n     *\n     * @param options - Named parameters\n     *\n     * @param options.count - Count algorithm to use to count updated rows.\n     *\n     * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n     * hood.\n     *\n     * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n     * statistics under the hood.\n     *\n     * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n     * numbers.\n     */\n\n  }, {\n    key: \"update\",\n    value: function update(values) {\n      var _ref5 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          count = _ref5.count;\n\n      var method = 'PATCH';\n      var prefersHeaders = [];\n\n      if (this.headers['Prefer']) {\n        prefersHeaders.push(this.headers['Prefer']);\n      }\n\n      if (count) {\n        prefersHeaders.push(\"count=\".concat(count));\n      }\n\n      this.headers['Prefer'] = prefersHeaders.join(',');\n      return new PostgrestFilterBuilder({\n        method: method,\n        url: this.url,\n        headers: this.headers,\n        schema: this.schema,\n        body: values,\n        fetch: this.fetch,\n        allowEmpty: false\n      });\n    }\n    /**\n     * Perform a DELETE on the table or view.\n     *\n     * By default, deleted rows are not returned. To return it, chain the call\n     * with `.select()` after filters.\n     *\n     * @param options - Named parameters\n     *\n     * @param options.count - Count algorithm to use to count deleted rows.\n     *\n     * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n     * hood.\n     *\n     * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n     * statistics under the hood.\n     *\n     * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n     * numbers.\n     */\n\n  }, {\n    key: \"delete\",\n    value: function _delete() {\n      var _ref6 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          count = _ref6.count;\n\n      var method = 'DELETE';\n      var prefersHeaders = [];\n\n      if (count) {\n        prefersHeaders.push(\"count=\".concat(count));\n      }\n\n      if (this.headers['Prefer']) {\n        prefersHeaders.unshift(this.headers['Prefer']);\n      }\n\n      this.headers['Prefer'] = prefersHeaders.join(',');\n      return new PostgrestFilterBuilder({\n        method: method,\n        url: this.url,\n        headers: this.headers,\n        schema: this.schema,\n        fetch: this.fetch,\n        allowEmpty: false\n      });\n    }\n  }]);\n\n  return PostgrestQueryBuilder;\n}();\n\nexport { PostgrestQueryBuilder as default };","map":{"version":3,"mappings":"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","names":["PostgrestFilterBuilder","PostgrestQueryBuilder","url","headers","schema","fetch","columns","head","count","method","quoted","cleanedColumns","split","map","c","test","join","searchParams","set","allowEmpty","values","defaultToNull","prefersHeaders","push","Array","isArray","reduce","acc","x","concat","Object","keys","length","uniqueColumns","Set","column","body","onConflict","ignoreDuplicates","undefined","unshift"],"sources":["/Users/rickygould/Documents/Github/Pug-Website/Downloads/web102_unit7lab-main/client/node_modules/@supabase/postgrest-js/src/PostgrestQueryBuilder.ts"],"sourcesContent":["import PostgrestBuilder from './PostgrestBuilder'\nimport PostgrestFilterBuilder from './PostgrestFilterBuilder'\nimport { GetResult } from './select-query-parser'\nimport { Fetch, GenericSchema, GenericTable, GenericView } from './types'\n\nexport default class PostgrestQueryBuilder<\n  Schema extends GenericSchema,\n  Relation extends GenericTable | GenericView,\n  RelationName = unknown,\n  Relationships = Relation extends { Relationships: infer R } ? R : unknown\n> {\n  url: URL\n  headers: Record<string, string>\n  schema?: string\n  signal?: AbortSignal\n  fetch?: Fetch\n\n  constructor(\n    url: URL,\n    {\n      headers = {},\n      schema,\n      fetch,\n    }: {\n      headers?: Record<string, string>\n      schema?: string\n      fetch?: Fetch\n    }\n  ) {\n    this.url = url\n    this.headers = headers\n    this.schema = schema\n    this.fetch = fetch\n  }\n\n  /**\n   * Perform a SELECT query on the table or view.\n   *\n   * @param columns - The columns to retrieve, separated by commas. Columns can be renamed when returned with `customName:columnName`\n   *\n   * @param options - Named parameters\n   *\n   * @param options.head - When set to `true`, `data` will not be returned.\n   * Useful if you only need the count.\n   *\n   * @param options.count - Count algorithm to use to count rows in the table or view.\n   *\n   * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n   * hood.\n   *\n   * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n   * statistics under the hood.\n   *\n   * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n   * numbers.\n   */\n  select<\n    Query extends string = '*',\n    ResultOne = GetResult<Schema, Relation['Row'], RelationName, Relationships, Query>\n  >(\n    columns?: Query,\n    {\n      head = false,\n      count,\n    }: {\n      head?: boolean\n      count?: 'exact' | 'planned' | 'estimated'\n    } = {}\n  ): PostgrestFilterBuilder<Schema, Relation['Row'], ResultOne[], RelationName, Relationships> {\n    const method = head ? 'HEAD' : 'GET'\n    // Remove whitespaces except when quoted\n    let quoted = false\n    const cleanedColumns = (columns ?? '*')\n      .split('')\n      .map((c) => {\n        if (/\\s/.test(c) && !quoted) {\n          return ''\n        }\n        if (c === '\"') {\n          quoted = !quoted\n        }\n        return c\n      })\n      .join('')\n    this.url.searchParams.set('select', cleanedColumns)\n    if (count) {\n      this.headers['Prefer'] = `count=${count}`\n    }\n\n    return new PostgrestFilterBuilder({\n      method,\n      url: this.url,\n      headers: this.headers,\n      schema: this.schema,\n      fetch: this.fetch,\n      allowEmpty: false,\n    } as unknown as PostgrestBuilder<ResultOne[]>)\n  }\n\n  // TODO(v3): Make `defaultToNull` consistent for both single & bulk inserts.\n  insert<Row extends Relation extends { Insert: unknown } ? Relation['Insert'] : never>(\n    values: Row,\n    options?: {\n      count?: 'exact' | 'planned' | 'estimated'\n    }\n  ): PostgrestFilterBuilder<Schema, Relation['Row'], null, RelationName, Relationships>\n  insert<Row extends Relation extends { Insert: unknown } ? Relation['Insert'] : never>(\n    values: Row[],\n    options?: {\n      count?: 'exact' | 'planned' | 'estimated'\n      defaultToNull?: boolean\n    }\n  ): PostgrestFilterBuilder<Schema, Relation['Row'], null, RelationName, Relationships>\n  /**\n   * Perform an INSERT into the table or view.\n   *\n   * By default, inserted rows are not returned. To return it, chain the call\n   * with `.select()`.\n   *\n   * @param values - The values to insert. Pass an object to insert a single row\n   * or an array to insert multiple rows.\n   *\n   * @param options - Named parameters\n   *\n   * @param options.count - Count algorithm to use to count inserted rows.\n   *\n   * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n   * hood.\n   *\n   * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n   * statistics under the hood.\n   *\n   * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n   * numbers.\n   *\n   * @param options.defaultToNull - Make missing fields default to `null`.\n   * Otherwise, use the default value for the column. Only applies for bulk\n   * inserts.\n   */\n  insert<Row extends Relation extends { Insert: unknown } ? Relation['Insert'] : never>(\n    values: Row | Row[],\n    {\n      count,\n      defaultToNull = true,\n    }: {\n      count?: 'exact' | 'planned' | 'estimated'\n      defaultToNull?: boolean\n    } = {}\n  ): PostgrestFilterBuilder<Schema, Relation['Row'], null, RelationName, Relationships> {\n    const method = 'POST'\n\n    const prefersHeaders = []\n    if (this.headers['Prefer']) {\n      prefersHeaders.push(this.headers['Prefer'])\n    }\n    if (count) {\n      prefersHeaders.push(`count=${count}`)\n    }\n    if (!defaultToNull) {\n      prefersHeaders.push('missing=default')\n    }\n    this.headers['Prefer'] = prefersHeaders.join(',')\n\n    if (Array.isArray(values)) {\n      const columns = values.reduce((acc, x) => acc.concat(Object.keys(x)), [] as string[])\n      if (columns.length > 0) {\n        const uniqueColumns = [...new Set(columns)].map((column) => `\"${column}\"`)\n        this.url.searchParams.set('columns', uniqueColumns.join(','))\n      }\n    }\n\n    return new PostgrestFilterBuilder({\n      method,\n      url: this.url,\n      headers: this.headers,\n      schema: this.schema,\n      body: values,\n      fetch: this.fetch,\n      allowEmpty: false,\n    } as unknown as PostgrestBuilder<null>)\n  }\n\n  // TODO(v3): Make `defaultToNull` consistent for both single & bulk upserts.\n  upsert<Row extends Relation extends { Insert: unknown } ? Relation['Insert'] : never>(\n    values: Row,\n    options?: {\n      onConflict?: string\n      ignoreDuplicates?: boolean\n      count?: 'exact' | 'planned' | 'estimated'\n    }\n  ): PostgrestFilterBuilder<Schema, Relation['Row'], null, RelationName, Relationships>\n  upsert<Row extends Relation extends { Insert: unknown } ? Relation['Insert'] : never>(\n    values: Row[],\n    options?: {\n      onConflict?: string\n      ignoreDuplicates?: boolean\n      count?: 'exact' | 'planned' | 'estimated'\n      defaultToNull?: boolean\n    }\n  ): PostgrestFilterBuilder<Schema, Relation['Row'], null, RelationName, Relationships>\n  /**\n   * Perform an UPSERT on the table or view. Depending on the column(s) passed\n   * to `onConflict`, `.upsert()` allows you to perform the equivalent of\n   * `.insert()` if a row with the corresponding `onConflict` columns doesn't\n   * exist, or if it does exist, perform an alternative action depending on\n   * `ignoreDuplicates`.\n   *\n   * By default, upserted rows are not returned. To return it, chain the call\n   * with `.select()`.\n   *\n   * @param values - The values to upsert with. Pass an object to upsert a\n   * single row or an array to upsert multiple rows.\n   *\n   * @param options - Named parameters\n   *\n   * @param options.onConflict - Comma-separated UNIQUE column(s) to specify how\n   * duplicate rows are determined. Two rows are duplicates if all the\n   * `onConflict` columns are equal.\n   *\n   * @param options.ignoreDuplicates - If `true`, duplicate rows are ignored. If\n   * `false`, duplicate rows are merged with existing rows.\n   *\n   * @param options.count - Count algorithm to use to count upserted rows.\n   *\n   * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n   * hood.\n   *\n   * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n   * statistics under the hood.\n   *\n   * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n   * numbers.\n   *\n   * @param options.defaultToNull - Make missing fields default to `null`.\n   * Otherwise, use the default value for the column. This only applies when\n   * inserting new rows, not when merging with existing rows under\n   * `ignoreDuplicates: false`. This also only applies when doing bulk upserts.\n   */\n  upsert<Row extends Relation extends { Insert: unknown } ? Relation['Insert'] : never>(\n    values: Row | Row[],\n    {\n      onConflict,\n      ignoreDuplicates = false,\n      count,\n      defaultToNull = true,\n    }: {\n      onConflict?: string\n      ignoreDuplicates?: boolean\n      count?: 'exact' | 'planned' | 'estimated'\n      defaultToNull?: boolean\n    } = {}\n  ): PostgrestFilterBuilder<Schema, Relation['Row'], null, RelationName, Relationships> {\n    const method = 'POST'\n\n    const prefersHeaders = [`resolution=${ignoreDuplicates ? 'ignore' : 'merge'}-duplicates`]\n\n    if (onConflict !== undefined) this.url.searchParams.set('on_conflict', onConflict)\n    if (this.headers['Prefer']) {\n      prefersHeaders.push(this.headers['Prefer'])\n    }\n    if (count) {\n      prefersHeaders.push(`count=${count}`)\n    }\n    if (!defaultToNull) {\n      prefersHeaders.push('missing=default')\n    }\n    this.headers['Prefer'] = prefersHeaders.join(',')\n\n    if (Array.isArray(values)) {\n      const columns = values.reduce((acc, x) => acc.concat(Object.keys(x)), [] as string[])\n      if (columns.length > 0) {\n        const uniqueColumns = [...new Set(columns)].map((column) => `\"${column}\"`)\n        this.url.searchParams.set('columns', uniqueColumns.join(','))\n      }\n    }\n\n    return new PostgrestFilterBuilder({\n      method,\n      url: this.url,\n      headers: this.headers,\n      schema: this.schema,\n      body: values,\n      fetch: this.fetch,\n      allowEmpty: false,\n    } as unknown as PostgrestBuilder<null>)\n  }\n\n  /**\n   * Perform an UPDATE on the table or view.\n   *\n   * By default, updated rows are not returned. To return it, chain the call\n   * with `.select()` after filters.\n   *\n   * @param values - The values to update with\n   *\n   * @param options - Named parameters\n   *\n   * @param options.count - Count algorithm to use to count updated rows.\n   *\n   * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n   * hood.\n   *\n   * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n   * statistics under the hood.\n   *\n   * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n   * numbers.\n   */\n  update<Row extends Relation extends { Update: unknown } ? Relation['Update'] : never>(\n    values: Row,\n    {\n      count,\n    }: {\n      count?: 'exact' | 'planned' | 'estimated'\n    } = {}\n  ): PostgrestFilterBuilder<Schema, Relation['Row'], null, RelationName, Relationships> {\n    const method = 'PATCH'\n    const prefersHeaders = []\n    if (this.headers['Prefer']) {\n      prefersHeaders.push(this.headers['Prefer'])\n    }\n    if (count) {\n      prefersHeaders.push(`count=${count}`)\n    }\n    this.headers['Prefer'] = prefersHeaders.join(',')\n\n    return new PostgrestFilterBuilder({\n      method,\n      url: this.url,\n      headers: this.headers,\n      schema: this.schema,\n      body: values,\n      fetch: this.fetch,\n      allowEmpty: false,\n    } as unknown as PostgrestBuilder<null>)\n  }\n\n  /**\n   * Perform a DELETE on the table or view.\n   *\n   * By default, deleted rows are not returned. To return it, chain the call\n   * with `.select()` after filters.\n   *\n   * @param options - Named parameters\n   *\n   * @param options.count - Count algorithm to use to count deleted rows.\n   *\n   * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n   * hood.\n   *\n   * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n   * statistics under the hood.\n   *\n   * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n   * numbers.\n   */\n  delete({\n    count,\n  }: {\n    count?: 'exact' | 'planned' | 'estimated'\n  } = {}): PostgrestFilterBuilder<Schema, Relation['Row'], null, RelationName, Relationships> {\n    const method = 'DELETE'\n    const prefersHeaders = []\n    if (count) {\n      prefersHeaders.push(`count=${count}`)\n    }\n    if (this.headers['Prefer']) {\n      prefersHeaders.unshift(this.headers['Prefer'])\n    }\n    this.headers['Prefer'] = prefersHeaders.join(',')\n\n    return new PostgrestFilterBuilder({\n      method,\n      url: this.url,\n      headers: this.headers,\n      schema: this.schema,\n      fetch: this.fetch,\n      allowEmpty: false,\n    } as unknown as PostgrestBuilder<null>)\n  }\n}\n"]},"metadata":{},"sourceType":"module"}