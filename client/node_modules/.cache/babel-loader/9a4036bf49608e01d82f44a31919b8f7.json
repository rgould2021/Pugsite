{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n}; // @ts-ignore\n\n\nimport nodeFetch, { Headers as NodeFetchHeaders } from '@supabase/node-fetch';\nexport const resolveFetch = customFetch => {\n  let _fetch;\n\n  if (customFetch) {\n    _fetch = customFetch;\n  } else if (typeof fetch === 'undefined') {\n    _fetch = nodeFetch;\n  } else {\n    _fetch = fetch;\n  }\n\n  return function () {\n    return _fetch(...arguments);\n  };\n};\nexport const resolveHeadersConstructor = () => {\n  if (typeof Headers === 'undefined') {\n    return NodeFetchHeaders;\n  }\n\n  return Headers;\n};\nexport const fetchWithAuth = (supabaseKey, getAccessToken, customFetch) => {\n  const fetch = resolveFetch(customFetch);\n  const HeadersConstructor = resolveHeadersConstructor();\n  return (input, init) => __awaiter(void 0, void 0, void 0, function* () {\n    var _a;\n\n    const accessToken = (_a = yield getAccessToken()) !== null && _a !== void 0 ? _a : supabaseKey;\n    let headers = new HeadersConstructor(init === null || init === void 0 ? void 0 : init.headers);\n\n    if (!headers.has('apikey')) {\n      headers.set('apikey', supabaseKey);\n    }\n\n    if (!headers.has('Authorization')) {\n      headers.set('Authorization', `Bearer ${accessToken}`);\n    }\n\n    return fetch(input, Object.assign(Object.assign({}, init), {\n      headers\n    }));\n  });\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAAA;;;AACA,OAAOA,SAAP,IAAoBC,OAAO,IAAIC,gBAA/B,QAAuD,sBAAvD;AAIA,OAAO,MAAMC,YAAY,GAAIC,WAAD,IAA+B;EACzD,IAAIC,MAAJ;;EACA,IAAID,WAAJ,EAAiB;IACfC,MAAM,GAAGD,WAAT;EACD,CAFD,MAEO,IAAI,OAAOE,KAAP,KAAiB,WAArB,EAAkC;IACvCD,MAAM,GAAGL,SAAT;EACD,CAFM,MAEA;IACLK,MAAM,GAAGC,KAAT;EACD;;EACD,OAAO;IAAA,OAAgCD,MAAM,CAAC,YAAD,CAAtC;EAAA,CAAP;AACD,CAVM;AAYP,OAAO,MAAME,yBAAyB,GAAG,MAAK;EAC5C,IAAI,OAAON,OAAP,KAAmB,WAAvB,EAAoC;IAClC,OAAOC,gBAAP;EACD;;EAED,OAAOD,OAAP;AACD,CANM;AAQP,OAAO,MAAMO,aAAa,GAAG,CAC3BC,WAD2B,EAE3BC,cAF2B,EAG3BN,WAH2B,KAIlB;EACT,MAAME,KAAK,GAAGH,YAAY,CAACC,WAAD,CAA1B;EACA,MAAMO,kBAAkB,GAAGJ,yBAAyB,EAApD;EAEA,OAAO,CAAOK,KAAP,EAAcC,IAAd,KAAsBC;;;IAC3B,MAAMC,WAAW,GAAG,MAAC,MAAML,cAAc,EAArB,MAAwB,IAAxB,IAAwBM,aAAxB,GAAwBA,EAAxB,GAA4BP,WAAhD;IACA,IAAIQ,OAAO,GAAG,IAAIN,kBAAJ,CAAuBE,IAAI,SAAJ,QAAI,WAAJ,GAAI,MAAJ,OAAI,CAAEI,OAA7B,CAAd;;IAEA,IAAI,CAACA,OAAO,CAACC,GAAR,CAAY,QAAZ,CAAL,EAA4B;MAC1BD,OAAO,CAACE,GAAR,CAAY,QAAZ,EAAsBV,WAAtB;IACD;;IAED,IAAI,CAACQ,OAAO,CAACC,GAAR,CAAY,eAAZ,CAAL,EAAmC;MACjCD,OAAO,CAACE,GAAR,CAAY,eAAZ,EAA6B,UAAUJ,WAAW,EAAlD;IACD;;IAED,OAAOT,KAAK,CAACM,KAAD,EAAMQ,gCAAOP,IAAP,GAAW;MAAEI;IAAF,CAAX,CAAN,CAAZ;EACD,CAb4B,CAA7B;AAcD,CAtBM","names":["nodeFetch","Headers","NodeFetchHeaders","resolveFetch","customFetch","_fetch","fetch","resolveHeadersConstructor","fetchWithAuth","supabaseKey","getAccessToken","HeadersConstructor","input","init","__awaiter","accessToken","_a","headers","has","set","Object"],"sources":["/Users/rickygould/Documents/School/FullStack/web102_unit7lab-main/client/node_modules/@supabase/supabase-js/src/lib/fetch.ts"],"sourcesContent":["// @ts-ignore\nimport nodeFetch, { Headers as NodeFetchHeaders } from '@supabase/node-fetch'\n\ntype Fetch = typeof fetch\n\nexport const resolveFetch = (customFetch?: Fetch): Fetch => {\n  let _fetch: Fetch\n  if (customFetch) {\n    _fetch = customFetch\n  } else if (typeof fetch === 'undefined') {\n    _fetch = nodeFetch as unknown as Fetch\n  } else {\n    _fetch = fetch\n  }\n  return (...args: Parameters<Fetch>) => _fetch(...args)\n}\n\nexport const resolveHeadersConstructor = () => {\n  if (typeof Headers === 'undefined') {\n    return NodeFetchHeaders\n  }\n\n  return Headers\n}\n\nexport const fetchWithAuth = (\n  supabaseKey: string,\n  getAccessToken: () => Promise<string | null>,\n  customFetch?: Fetch\n): Fetch => {\n  const fetch = resolveFetch(customFetch)\n  const HeadersConstructor = resolveHeadersConstructor()\n\n  return async (input, init) => {\n    const accessToken = (await getAccessToken()) ?? supabaseKey\n    let headers = new HeadersConstructor(init?.headers)\n\n    if (!headers.has('apikey')) {\n      headers.set('apikey', supabaseKey)\n    }\n\n    if (!headers.has('Authorization')) {\n      headers.set('Authorization', `Bearer ${accessToken}`)\n    }\n\n    return fetch(input, { ...init, headers })\n  }\n}\n"]},"metadata":{},"sourceType":"module"}