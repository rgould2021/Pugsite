{"ast":null,"code":"var _jsxFileName = \"/Users/rickygould/Downloads/web102_unit7lab-main/client/src/pages/DetailPostPage.js\",\n    _s = $RefreshSig$();\n\n// DetailPostPage.js\nimport React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { supabase } from '../client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst DetailPostPage = () => {\n  _s();\n\n  const {\n    postId\n  } = useParams();\n  const [post, setPost] = useState(null);\n  const [comments, setComments] = useState([]);\n  const [newComment, setNewComment] = useState('');\n  useEffect(() => {\n    const fetchPost = async () => {\n      // Fetch post data\n      const {\n        data: postData,\n        error\n      } = await supabase.from('Posts').select('*').eq('id', postId).single();\n\n      if (error) {\n        console.error('Error fetching post:', error.message);\n        return;\n      }\n\n      setPost(postData); // Fetch comments for the post\n\n      const {\n        data: commentData,\n        error: commentError\n      } = await supabase.from('Comments').select('*').eq('post_id', postId);\n\n      if (commentError) {\n        console.error('Error fetching comments:', commentError.message);\n        return;\n      }\n\n      setComments(commentData);\n    };\n\n    fetchPost();\n  }, [postId]);\n\n  const handleCommentSubmit = async () => {\n    // Submit new comment to the database\n    await supabase.from('Comments').insert([{\n      post_id: postId,\n      text: newComment\n    }]); // Refetch comments to update the UI\n    // (Alternatively, you can optimistically add the new comment to the UI without refetching)\n\n    const {\n      data\n    } = await supabase.from('Comments').select('*').eq('post_id', postId);\n    setComments(data); // Clear the input field after submission\n\n    setNewComment('');\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [post && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: post.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Author: \", post.author]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: post.content\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Comments\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: comments.map(comment => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: comment.text\n        }, comment.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: newComment,\n        onChange: e => setNewComment(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleCommentSubmit,\n        children: \"Add Comment\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n};\n\n_s(DetailPostPage, \"bQHTHsIW5O41e+HhKRQnQmcP4+U=\", false, function () {\n  return [useParams];\n});\n\n_c = DetailPostPage;\nexport default DetailPostPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"DetailPostPage\");","map":{"version":3,"names":["React","useState","useEffect","useParams","supabase","DetailPostPage","postId","post","setPost","comments","setComments","newComment","setNewComment","fetchPost","data","postData","error","from","select","eq","single","console","message","commentData","commentError","handleCommentSubmit","insert","post_id","text","title","author","content","map","comment","id","e","target","value"],"sources":["/Users/rickygould/Downloads/web102_unit7lab-main/client/src/pages/DetailPostPage.js"],"sourcesContent":["// DetailPostPage.js\nimport React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { supabase } from '../client';\n\nconst DetailPostPage = () => {\n  const { postId } = useParams();\n  const [post, setPost] = useState(null);\n  const [comments, setComments] = useState([]);\n  const [newComment, setNewComment] = useState('');\n\n  useEffect(() => {\n    const fetchPost = async () => {\n      // Fetch post data\n      const { data: postData, error } = await supabase\n        .from('Posts')\n        .select('*')\n        .eq('id', postId)\n        .single();\n\n      if (error) {\n        console.error('Error fetching post:', error.message);\n        return;\n      }\n\n      setPost(postData);\n\n      // Fetch comments for the post\n      const { data: commentData, error: commentError } = await supabase\n        .from('Comments')\n        .select('*')\n        .eq('post_id', postId);\n\n      if (commentError) {\n        console.error('Error fetching comments:', commentError.message);\n        return;\n      }\n\n      setComments(commentData);\n    };\n\n    fetchPost();\n  }, [postId]);\n\n  const handleCommentSubmit = async () => {\n    // Submit new comment to the database\n    await supabase.from('Comments').insert([{ post_id: postId, text: newComment }]);\n    // Refetch comments to update the UI\n    // (Alternatively, you can optimistically add the new comment to the UI without refetching)\n    const { data } = await supabase.from('Comments').select('*').eq('post_id', postId);\n    setComments(data);\n    // Clear the input field after submission\n    setNewComment('');\n  };\n\n  return (\n    <div>\n      {post && (\n        <div>\n          <h1>{post.title}</h1>\n          <p>Author: {post.author}</p>\n          <p>{post.content}</p>\n        </div>\n      )}\n\n      <div>\n        <h2>Comments</h2>\n        <ul>\n          {comments.map(comment => (\n            <li key={comment.id}>{comment.text}</li>\n          ))}\n        </ul>\n        <textarea value={newComment} onChange={e => setNewComment(e.target.value)} />\n        <button onClick={handleCommentSubmit}>Add Comment</button>\n      </div>\n    </div>\n  );\n};\n\nexport default DetailPostPage;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}