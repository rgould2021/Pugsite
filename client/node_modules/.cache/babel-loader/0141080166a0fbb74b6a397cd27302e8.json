{"ast":null,"code":"import PostgrestBuilder from './PostgrestBuilder';\nexport default class PostgrestTransformBuilder extends PostgrestBuilder {\n  /**\n   * Perform a SELECT on the query result.\n   *\n   * By default, `.insert()`, `.update()`, `.upsert()`, and `.delete()` do not\n   * return modified rows. By calling this method, modified rows are returned in\n   * `data`.\n   *\n   * @param columns - The columns to retrieve, separated by commas\n   */\n  select(columns) {\n    // Remove whitespaces except when quoted\n    let quoted = false;\n    const cleanedColumns = (columns !== null && columns !== void 0 ? columns : '*').split('').map(c => {\n      if (/\\s/.test(c) && !quoted) {\n        return '';\n      }\n\n      if (c === '\"') {\n        quoted = !quoted;\n      }\n\n      return c;\n    }).join('');\n    this.url.searchParams.set('select', cleanedColumns);\n\n    if (this.headers['Prefer']) {\n      this.headers['Prefer'] += ',';\n    }\n\n    this.headers['Prefer'] += 'return=representation';\n    return this;\n  }\n  /**\n   * Order the query result by `column`.\n   *\n   * You can call this method multiple times to order by multiple columns.\n   *\n   * You can order referenced tables, but it only affects the ordering of the\n   * parent table if you use `!inner` in the query.\n   *\n   * @param column - The column to order by\n   * @param options - Named parameters\n   * @param options.ascending - If `true`, the result will be in ascending order\n   * @param options.nullsFirst - If `true`, `null`s appear first. If `false`,\n   * `null`s appear last.\n   * @param options.referencedTable - Set this to order a referenced table by\n   * its columns\n   * @param options.foreignTable - Deprecated, use `options.referencedTable`\n   * instead\n   */\n\n\n  order(column) {\n    let {\n      ascending = true,\n      nullsFirst,\n      foreignTable,\n      referencedTable = foreignTable\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const key = referencedTable ? `${referencedTable}.order` : 'order';\n    const existingOrder = this.url.searchParams.get(key);\n    this.url.searchParams.set(key, `${existingOrder ? `${existingOrder},` : ''}${column}.${ascending ? 'asc' : 'desc'}${nullsFirst === undefined ? '' : nullsFirst ? '.nullsfirst' : '.nullslast'}`);\n    return this;\n  }\n  /**\n   * Limit the query result by `count`.\n   *\n   * @param count - The maximum number of rows to return\n   * @param options - Named parameters\n   * @param options.referencedTable - Set this to limit rows of referenced\n   * tables instead of the parent table\n   * @param options.foreignTable - Deprecated, use `options.referencedTable`\n   * instead\n   */\n\n\n  limit(count) {\n    let {\n      foreignTable,\n      referencedTable = foreignTable\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const key = typeof referencedTable === 'undefined' ? 'limit' : `${referencedTable}.limit`;\n    this.url.searchParams.set(key, `${count}`);\n    return this;\n  }\n  /**\n   * Limit the query result by starting at an offset (`from`) and ending at the offset (`from + to`).\n   * Only records within this range are returned.\n   * This respects the query order and if there is no order clause the range could behave unexpectedly.\n   * The `from` and `to` values are 0-based and inclusive: `range(1, 3)` will include the second, third\n   * and fourth rows of the query.\n   *\n   * @param from - The starting index from which to limit the result\n   * @param to - The last index to which to limit the result\n   * @param options - Named parameters\n   * @param options.referencedTable - Set this to limit rows of referenced\n   * tables instead of the parent table\n   * @param options.foreignTable - Deprecated, use `options.referencedTable`\n   * instead\n   */\n\n\n  range(from, to) {\n    let {\n      foreignTable,\n      referencedTable = foreignTable\n    } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    const keyOffset = typeof referencedTable === 'undefined' ? 'offset' : `${referencedTable}.offset`;\n    const keyLimit = typeof referencedTable === 'undefined' ? 'limit' : `${referencedTable}.limit`;\n    this.url.searchParams.set(keyOffset, `${from}`); // Range is inclusive, so add 1\n\n    this.url.searchParams.set(keyLimit, `${to - from + 1}`);\n    return this;\n  }\n  /**\n   * Set the AbortSignal for the fetch request.\n   *\n   * @param signal - The AbortSignal to use for the fetch request\n   */\n\n\n  abortSignal(signal) {\n    this.signal = signal;\n    return this;\n  }\n  /**\n   * Return `data` as a single object instead of an array of objects.\n   *\n   * Query result must be one row (e.g. using `.limit(1)`), otherwise this\n   * returns an error.\n   */\n\n\n  single() {\n    this.headers['Accept'] = 'application/vnd.pgrst.object+json';\n    return this;\n  }\n  /**\n   * Return `data` as a single object instead of an array of objects.\n   *\n   * Query result must be zero or one row (e.g. using `.limit(1)`), otherwise\n   * this returns an error.\n   */\n\n\n  maybeSingle() {\n    // Temporary partial fix for https://github.com/supabase/postgrest-js/issues/361\n    // Issue persists e.g. for `.insert([...]).select().maybeSingle()`\n    if (this.method === 'GET') {\n      this.headers['Accept'] = 'application/json';\n    } else {\n      this.headers['Accept'] = 'application/vnd.pgrst.object+json';\n    }\n\n    this.isMaybeSingle = true;\n    return this;\n  }\n  /**\n   * Return `data` as a string in CSV format.\n   */\n\n\n  csv() {\n    this.headers['Accept'] = 'text/csv';\n    return this;\n  }\n  /**\n   * Return `data` as an object in [GeoJSON](https://geojson.org) format.\n   */\n\n\n  geojson() {\n    this.headers['Accept'] = 'application/geo+json';\n    return this;\n  }\n  /**\n   * Return `data` as the EXPLAIN plan for the query.\n   *\n   * You need to enable the\n   * [db_plan_enabled](https://supabase.com/docs/guides/database/debugging-performance#enabling-explain)\n   * setting before using this method.\n   *\n   * @param options - Named parameters\n   *\n   * @param options.analyze - If `true`, the query will be executed and the\n   * actual run time will be returned\n   *\n   * @param options.verbose - If `true`, the query identifier will be returned\n   * and `data` will include the output columns of the query\n   *\n   * @param options.settings - If `true`, include information on configuration\n   * parameters that affect query planning\n   *\n   * @param options.buffers - If `true`, include information on buffer usage\n   *\n   * @param options.wal - If `true`, include information on WAL record generation\n   *\n   * @param options.format - The format of the output, can be `\"text\"` (default)\n   * or `\"json\"`\n   */\n\n\n  explain() {\n    let {\n      analyze = false,\n      verbose = false,\n      settings = false,\n      buffers = false,\n      wal = false,\n      format = 'text'\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    var _a;\n\n    const options = [analyze ? 'analyze' : null, verbose ? 'verbose' : null, settings ? 'settings' : null, buffers ? 'buffers' : null, wal ? 'wal' : null].filter(Boolean).join('|'); // An Accept header can carry multiple media types but postgrest-js always sends one\n\n    const forMediatype = (_a = this.headers['Accept']) !== null && _a !== void 0 ? _a : 'application/json';\n    this.headers['Accept'] = `application/vnd.pgrst.plan+${format}; for=\"${forMediatype}\"; options=${options};`;\n    if (format === 'json') return this;else return this;\n  }\n  /**\n   * Rollback the query.\n   *\n   * `data` will still be returned, but the query is not committed.\n   */\n\n\n  rollback() {\n    var _a;\n\n    if (((_a = this.headers['Prefer']) !== null && _a !== void 0 ? _a : '').trim().length > 0) {\n      this.headers['Prefer'] += ',tx=rollback';\n    } else {\n      this.headers['Prefer'] = 'tx=rollback';\n    }\n\n    return this;\n  }\n  /**\n   * Override the type of the returned `data`.\n   *\n   * @typeParam NewResult - The new result type to override with\n   */\n\n\n  returns() {\n    return this;\n  }\n\n}","map":{"version":3,"mappings":"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","names":["PostgrestBuilder","PostgrestTransformBuilder","select","columns","quoted","cleanedColumns","split","map","c","test","join","url","searchParams","set","headers","order","column","ascending","nullsFirst","foreignTable","referencedTable","key","existingOrder","get","undefined","limit","count","range","from","to","keyOffset","keyLimit","abortSignal","signal","single","maybeSingle","method","isMaybeSingle","csv","geojson","explain","analyze","verbose","settings","buffers","wal","format","options","filter","Boolean","forMediatype","_a","rollback","trim","length","returns"],"sources":["/Users/rickygould/Documents/Github/Pug-Website/Downloads/web102_unit7lab-main/client/node_modules/@supabase/postgrest-js/src/PostgrestTransformBuilder.ts"],"sourcesContent":["import PostgrestBuilder from './PostgrestBuilder'\nimport { GetResult } from './select-query-parser'\nimport { GenericSchema } from './types'\n\nexport default class PostgrestTransformBuilder<\n  Schema extends GenericSchema,\n  Row extends Record<string, unknown>,\n  Result,\n  RelationName = unknown,\n  Relationships = unknown\n> extends PostgrestBuilder<Result> {\n  /**\n   * Perform a SELECT on the query result.\n   *\n   * By default, `.insert()`, `.update()`, `.upsert()`, and `.delete()` do not\n   * return modified rows. By calling this method, modified rows are returned in\n   * `data`.\n   *\n   * @param columns - The columns to retrieve, separated by commas\n   */\n  select<\n    Query extends string = '*',\n    NewResultOne = GetResult<Schema, Row, RelationName, Relationships, Query>\n  >(\n    columns?: Query\n  ): PostgrestTransformBuilder<Schema, Row, NewResultOne[], RelationName, Relationships> {\n    // Remove whitespaces except when quoted\n    let quoted = false\n    const cleanedColumns = (columns ?? '*')\n      .split('')\n      .map((c) => {\n        if (/\\s/.test(c) && !quoted) {\n          return ''\n        }\n        if (c === '\"') {\n          quoted = !quoted\n        }\n        return c\n      })\n      .join('')\n    this.url.searchParams.set('select', cleanedColumns)\n    if (this.headers['Prefer']) {\n      this.headers['Prefer'] += ','\n    }\n    this.headers['Prefer'] += 'return=representation'\n    return this as unknown as PostgrestTransformBuilder<\n      Schema,\n      Row,\n      NewResultOne[],\n      RelationName,\n      Relationships\n    >\n  }\n\n  order<ColumnName extends string & keyof Row>(\n    column: ColumnName,\n    options?: { ascending?: boolean; nullsFirst?: boolean; referencedTable?: undefined }\n  ): this\n  order(\n    column: string,\n    options?: { ascending?: boolean; nullsFirst?: boolean; referencedTable?: string }\n  ): this\n  /**\n   * @deprecated Use `options.referencedTable` instead of `options.foreignTable`\n   */\n  order<ColumnName extends string & keyof Row>(\n    column: ColumnName,\n    options?: { ascending?: boolean; nullsFirst?: boolean; foreignTable?: undefined }\n  ): this\n  /**\n   * @deprecated Use `options.referencedTable` instead of `options.foreignTable`\n   */\n  order(\n    column: string,\n    options?: { ascending?: boolean; nullsFirst?: boolean; foreignTable?: string }\n  ): this\n  /**\n   * Order the query result by `column`.\n   *\n   * You can call this method multiple times to order by multiple columns.\n   *\n   * You can order referenced tables, but it only affects the ordering of the\n   * parent table if you use `!inner` in the query.\n   *\n   * @param column - The column to order by\n   * @param options - Named parameters\n   * @param options.ascending - If `true`, the result will be in ascending order\n   * @param options.nullsFirst - If `true`, `null`s appear first. If `false`,\n   * `null`s appear last.\n   * @param options.referencedTable - Set this to order a referenced table by\n   * its columns\n   * @param options.foreignTable - Deprecated, use `options.referencedTable`\n   * instead\n   */\n  order(\n    column: string,\n    {\n      ascending = true,\n      nullsFirst,\n      foreignTable,\n      referencedTable = foreignTable,\n    }: {\n      ascending?: boolean\n      nullsFirst?: boolean\n      foreignTable?: string\n      referencedTable?: string\n    } = {}\n  ): this {\n    const key = referencedTable ? `${referencedTable}.order` : 'order'\n    const existingOrder = this.url.searchParams.get(key)\n\n    this.url.searchParams.set(\n      key,\n      `${existingOrder ? `${existingOrder},` : ''}${column}.${ascending ? 'asc' : 'desc'}${\n        nullsFirst === undefined ? '' : nullsFirst ? '.nullsfirst' : '.nullslast'\n      }`\n    )\n    return this\n  }\n\n  /**\n   * Limit the query result by `count`.\n   *\n   * @param count - The maximum number of rows to return\n   * @param options - Named parameters\n   * @param options.referencedTable - Set this to limit rows of referenced\n   * tables instead of the parent table\n   * @param options.foreignTable - Deprecated, use `options.referencedTable`\n   * instead\n   */\n  limit(\n    count: number,\n    {\n      foreignTable,\n      referencedTable = foreignTable,\n    }: { foreignTable?: string; referencedTable?: string } = {}\n  ): this {\n    const key = typeof referencedTable === 'undefined' ? 'limit' : `${referencedTable}.limit`\n    this.url.searchParams.set(key, `${count}`)\n    return this\n  }\n\n  /**\n   * Limit the query result by starting at an offset (`from`) and ending at the offset (`from + to`).\n   * Only records within this range are returned.\n   * This respects the query order and if there is no order clause the range could behave unexpectedly.\n   * The `from` and `to` values are 0-based and inclusive: `range(1, 3)` will include the second, third\n   * and fourth rows of the query.\n   *\n   * @param from - The starting index from which to limit the result\n   * @param to - The last index to which to limit the result\n   * @param options - Named parameters\n   * @param options.referencedTable - Set this to limit rows of referenced\n   * tables instead of the parent table\n   * @param options.foreignTable - Deprecated, use `options.referencedTable`\n   * instead\n   */\n  range(\n    from: number,\n    to: number,\n    {\n      foreignTable,\n      referencedTable = foreignTable,\n    }: { foreignTable?: string; referencedTable?: string } = {}\n  ): this {\n    const keyOffset =\n      typeof referencedTable === 'undefined' ? 'offset' : `${referencedTable}.offset`\n    const keyLimit = typeof referencedTable === 'undefined' ? 'limit' : `${referencedTable}.limit`\n    this.url.searchParams.set(keyOffset, `${from}`)\n    // Range is inclusive, so add 1\n    this.url.searchParams.set(keyLimit, `${to - from + 1}`)\n    return this\n  }\n\n  /**\n   * Set the AbortSignal for the fetch request.\n   *\n   * @param signal - The AbortSignal to use for the fetch request\n   */\n  abortSignal(signal: AbortSignal): this {\n    this.signal = signal\n    return this\n  }\n\n  /**\n   * Return `data` as a single object instead of an array of objects.\n   *\n   * Query result must be one row (e.g. using `.limit(1)`), otherwise this\n   * returns an error.\n   */\n  single<\n    ResultOne = Result extends (infer ResultOne)[] ? ResultOne : never\n  >(): PostgrestBuilder<ResultOne> {\n    this.headers['Accept'] = 'application/vnd.pgrst.object+json'\n    return this as PostgrestBuilder<ResultOne>\n  }\n\n  /**\n   * Return `data` as a single object instead of an array of objects.\n   *\n   * Query result must be zero or one row (e.g. using `.limit(1)`), otherwise\n   * this returns an error.\n   */\n  maybeSingle<\n    ResultOne = Result extends (infer ResultOne)[] ? ResultOne : never\n  >(): PostgrestBuilder<ResultOne | null> {\n    // Temporary partial fix for https://github.com/supabase/postgrest-js/issues/361\n    // Issue persists e.g. for `.insert([...]).select().maybeSingle()`\n    if (this.method === 'GET') {\n      this.headers['Accept'] = 'application/json'\n    } else {\n      this.headers['Accept'] = 'application/vnd.pgrst.object+json'\n    }\n    this.isMaybeSingle = true\n    return this as PostgrestBuilder<ResultOne | null>\n  }\n\n  /**\n   * Return `data` as a string in CSV format.\n   */\n  csv(): PostgrestBuilder<string> {\n    this.headers['Accept'] = 'text/csv'\n    return this as PostgrestBuilder<string>\n  }\n\n  /**\n   * Return `data` as an object in [GeoJSON](https://geojson.org) format.\n   */\n  geojson(): PostgrestBuilder<Record<string, unknown>> {\n    this.headers['Accept'] = 'application/geo+json'\n    return this as PostgrestBuilder<Record<string, unknown>>\n  }\n\n  /**\n   * Return `data` as the EXPLAIN plan for the query.\n   *\n   * You need to enable the\n   * [db_plan_enabled](https://supabase.com/docs/guides/database/debugging-performance#enabling-explain)\n   * setting before using this method.\n   *\n   * @param options - Named parameters\n   *\n   * @param options.analyze - If `true`, the query will be executed and the\n   * actual run time will be returned\n   *\n   * @param options.verbose - If `true`, the query identifier will be returned\n   * and `data` will include the output columns of the query\n   *\n   * @param options.settings - If `true`, include information on configuration\n   * parameters that affect query planning\n   *\n   * @param options.buffers - If `true`, include information on buffer usage\n   *\n   * @param options.wal - If `true`, include information on WAL record generation\n   *\n   * @param options.format - The format of the output, can be `\"text\"` (default)\n   * or `\"json\"`\n   */\n  explain({\n    analyze = false,\n    verbose = false,\n    settings = false,\n    buffers = false,\n    wal = false,\n    format = 'text',\n  }: {\n    analyze?: boolean\n    verbose?: boolean\n    settings?: boolean\n    buffers?: boolean\n    wal?: boolean\n    format?: 'json' | 'text'\n  } = {}): PostgrestBuilder<Record<string, unknown>[]> | PostgrestBuilder<string> {\n    const options = [\n      analyze ? 'analyze' : null,\n      verbose ? 'verbose' : null,\n      settings ? 'settings' : null,\n      buffers ? 'buffers' : null,\n      wal ? 'wal' : null,\n    ]\n      .filter(Boolean)\n      .join('|')\n    // An Accept header can carry multiple media types but postgrest-js always sends one\n    const forMediatype = this.headers['Accept'] ?? 'application/json'\n    this.headers[\n      'Accept'\n    ] = `application/vnd.pgrst.plan+${format}; for=\"${forMediatype}\"; options=${options};`\n    if (format === 'json') return this as PostgrestBuilder<Record<string, unknown>[]>\n    else return this as PostgrestBuilder<string>\n  }\n\n  /**\n   * Rollback the query.\n   *\n   * `data` will still be returned, but the query is not committed.\n   */\n  rollback(): this {\n    if ((this.headers['Prefer'] ?? '').trim().length > 0) {\n      this.headers['Prefer'] += ',tx=rollback'\n    } else {\n      this.headers['Prefer'] = 'tx=rollback'\n    }\n    return this\n  }\n\n  /**\n   * Override the type of the returned `data`.\n   *\n   * @typeParam NewResult - The new result type to override with\n   */\n  returns<NewResult>(): PostgrestTransformBuilder<\n    Schema,\n    Row,\n    NewResult,\n    RelationName,\n    Relationships\n  > {\n    return this as unknown as PostgrestTransformBuilder<\n      Schema,\n      Row,\n      NewResult,\n      RelationName,\n      Relationships\n    >\n  }\n}\n"]},"metadata":{},"sourceType":"module"}