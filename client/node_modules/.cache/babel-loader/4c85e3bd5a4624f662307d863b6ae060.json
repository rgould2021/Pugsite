{"ast":null,"code":"import SupabaseClient from './SupabaseClient';\nexport * from '@supabase/auth-js';\nexport { FunctionsHttpError, FunctionsFetchError, FunctionsRelayError, FunctionsError, FunctionRegion } from '@supabase/functions-js';\nexport * from '@supabase/realtime-js';\nexport { default as SupabaseClient } from './SupabaseClient';\n/**\n * Creates a new Supabase Client.\n */\n\nexport const createClient = (supabaseUrl, supabaseKey, options) => {\n  return new SupabaseClient(supabaseUrl, supabaseKey, options);\n};","map":{"version":3,"mappings":"AAAA,OAAOA,cAAP,MAA2B,kBAA3B;AAGA,cAAc,mBAAd;AAQA,SACEC,kBADF,EAEEC,mBAFF,EAGEC,mBAHF,EAIEC,cAJF,EAMEC,cANF,QAOO,wBAPP;AAQA,cAAc,uBAAd;AACA,SAASC,OAAO,IAAIN,cAApB,QAA0C,kBAA1C;AAGA;;;;AAGA,OAAO,MAAMO,YAAY,GAAG,CAS1BC,WAT0B,EAU1BC,WAV0B,EAW1BC,OAX0B,KAYsB;EAChD,OAAO,IAAIV,cAAJ,CAAiDQ,WAAjD,EAA8DC,WAA9D,EAA2EC,OAA3E,CAAP;AACD,CAdM","names":["SupabaseClient","FunctionsHttpError","FunctionsFetchError","FunctionsRelayError","FunctionsError","FunctionRegion","default","createClient","supabaseUrl","supabaseKey","options"],"sources":["/Users/rickygould/Downloads/web102_unit7lab-main/client/node_modules/@supabase/supabase-js/src/index.ts"],"sourcesContent":["import SupabaseClient from './SupabaseClient'\nimport type { GenericSchema, SupabaseClientOptions } from './lib/types'\n\nexport * from '@supabase/auth-js'\nexport type { User as AuthUser, Session as AuthSession } from '@supabase/auth-js'\nexport type {\n  PostgrestResponse,\n  PostgrestSingleResponse,\n  PostgrestMaybeSingleResponse,\n  PostgrestError,\n} from '@supabase/postgrest-js'\nexport {\n  FunctionsHttpError,\n  FunctionsFetchError,\n  FunctionsRelayError,\n  FunctionsError,\n  FunctionInvokeOptions,\n  FunctionRegion,\n} from '@supabase/functions-js'\nexport * from '@supabase/realtime-js'\nexport { default as SupabaseClient } from './SupabaseClient'\nexport type { SupabaseClientOptions, QueryResult, QueryData, QueryError } from './lib/types'\n\n/**\n * Creates a new Supabase Client.\n */\nexport const createClient = <\n  Database = any,\n  SchemaName extends string & keyof Database = 'public' extends keyof Database\n    ? 'public'\n    : string & keyof Database,\n  Schema extends GenericSchema = Database[SchemaName] extends GenericSchema\n    ? Database[SchemaName]\n    : any\n>(\n  supabaseUrl: string,\n  supabaseKey: string,\n  options?: SupabaseClientOptions<SchemaName>\n): SupabaseClient<Database, SchemaName, Schema> => {\n  return new SupabaseClient<Database, SchemaName, Schema>(supabaseUrl, supabaseKey, options)\n}\n"]},"metadata":{},"sourceType":"module"}