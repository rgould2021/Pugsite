{"ast":null,"code":"import _slicedToArray from \"/Users/rickygould/Downloads/web102_unit7lab-main/client/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _classCallCheck from \"/Users/rickygould/Downloads/web102_unit7lab-main/client/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/rickygould/Downloads/web102_unit7lab-main/client/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport PostgrestQueryBuilder from './PostgrestQueryBuilder';\nimport PostgrestFilterBuilder from './PostgrestFilterBuilder';\nimport { DEFAULT_HEADERS } from './constants';\n/**\n * PostgREST client.\n *\n * @typeParam Database - Types for the schema from the [type\n * generator](https://supabase.com/docs/reference/javascript/next/typescript-support)\n *\n * @typeParam SchemaName - Postgres schema to switch to. Must be a string\n * literal, the same one passed to the constructor. If the schema is not\n * `\"public\"`, this must be supplied manually.\n */\n\nvar PostgrestClient = /*#__PURE__*/function () {\n  // TODO: Add back shouldThrowOnError once we figure out the typings\n\n  /**\n   * Creates a PostgREST client.\n   *\n   * @param url - URL of the PostgREST endpoint\n   * @param options - Named parameters\n   * @param options.headers - Custom headers\n   * @param options.schema - Postgres schema to switch to\n   * @param options.fetch - Custom fetch\n   */\n  function PostgrestClient(url) {\n    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        _ref$headers = _ref.headers,\n        headers = _ref$headers === void 0 ? {} : _ref$headers,\n        schema = _ref.schema,\n        fetch = _ref.fetch;\n\n    _classCallCheck(this, PostgrestClient);\n\n    this.url = url;\n    this.headers = Object.assign(Object.assign({}, DEFAULT_HEADERS), headers);\n    this.schemaName = schema;\n    this.fetch = fetch;\n  }\n  /**\n   * Perform a query on a table or a view.\n   *\n   * @param relation - The table or view name to query\n   */\n\n\n  _createClass(PostgrestClient, [{\n    key: \"from\",\n    value: function from(relation) {\n      var url = new URL(\"\".concat(this.url, \"/\").concat(relation));\n      return new PostgrestQueryBuilder(url, {\n        headers: Object.assign({}, this.headers),\n        schema: this.schemaName,\n        fetch: this.fetch\n      });\n    }\n    /**\n     * Select a schema to query or perform an function (rpc) call.\n     *\n     * The schema needs to be on the list of exposed schemas inside Supabase.\n     *\n     * @param schema - The schema to query\n     */\n\n  }, {\n    key: \"schema\",\n    value: function schema(_schema) {\n      return new PostgrestClient(this.url, {\n        headers: this.headers,\n        schema: _schema,\n        fetch: this.fetch\n      });\n    }\n    /**\n     * Perform a function call.\n     *\n     * @param fn - The function name to call\n     * @param args - The arguments to pass to the function call\n     * @param options - Named parameters\n     * @param options.head - When set to `true`, `data` will not be returned.\n     * Useful if you only need the count.\n     * @param options.get - When set to `true`, the function will be called with\n     * read-only access mode.\n     * @param options.count - Count algorithm to use to count rows returned by the\n     * function. Only applicable for [set-returning\n     * functions](https://www.postgresql.org/docs/current/functions-srf.html).\n     *\n     * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n     * hood.\n     *\n     * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n     * statistics under the hood.\n     *\n     * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n     * numbers.\n     */\n\n  }, {\n    key: \"rpc\",\n    value: function rpc(fn) {\n      var args = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      var _ref2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n          _ref2$head = _ref2.head,\n          head = _ref2$head === void 0 ? false : _ref2$head,\n          _ref2$get = _ref2.get,\n          get = _ref2$get === void 0 ? false : _ref2$get,\n          count = _ref2.count;\n\n      var method;\n      var url = new URL(\"\".concat(this.url, \"/rpc/\").concat(fn));\n      var body;\n\n      if (head || get) {\n        method = head ? 'HEAD' : 'GET';\n        Object.entries(args) // params with undefined value needs to be filtered out, otherwise it'll\n        // show up as `?param=undefined`\n        .filter(function (_ref3) {\n          var _ref4 = _slicedToArray(_ref3, 2),\n              _ = _ref4[0],\n              value = _ref4[1];\n\n          return value !== undefined;\n        }) // array values need special syntax\n        .map(function (_ref5) {\n          var _ref6 = _slicedToArray(_ref5, 2),\n              name = _ref6[0],\n              value = _ref6[1];\n\n          return [name, Array.isArray(value) ? \"{\".concat(value.join(','), \"}\") : \"\".concat(value)];\n        }).forEach(function (_ref7) {\n          var _ref8 = _slicedToArray(_ref7, 2),\n              name = _ref8[0],\n              value = _ref8[1];\n\n          url.searchParams.append(name, value);\n        });\n      } else {\n        method = 'POST';\n        body = args;\n      }\n\n      var headers = Object.assign({}, this.headers);\n\n      if (count) {\n        headers['Prefer'] = \"count=\".concat(count);\n      }\n\n      return new PostgrestFilterBuilder({\n        method: method,\n        url: url,\n        headers: headers,\n        schema: this.schemaName,\n        body: body,\n        fetch: this.fetch,\n        allowEmpty: false\n      });\n    }\n  }]);\n\n  return PostgrestClient;\n}();\n\nexport { PostgrestClient as default };","map":{"version":3,"mappings":"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","names":["PostgrestQueryBuilder","PostgrestFilterBuilder","DEFAULT_HEADERS","PostgrestClient","url","headers","schema","fetch","Object","schemaName","relation","URL","fn","args","head","get","count","method","body","entries","filter","_","value","undefined","map","name","Array","isArray","join","forEach","searchParams","append","allowEmpty"],"sources":["/Users/rickygould/Downloads/web102_unit7lab-main/client/node_modules/@supabase/postgrest-js/src/PostgrestClient.ts"],"sourcesContent":["import PostgrestQueryBuilder from './PostgrestQueryBuilder'\nimport PostgrestFilterBuilder from './PostgrestFilterBuilder'\nimport PostgrestBuilder from './PostgrestBuilder'\nimport { DEFAULT_HEADERS } from './constants'\nimport { Fetch, GenericSchema } from './types'\n\n/**\n * PostgREST client.\n *\n * @typeParam Database - Types for the schema from the [type\n * generator](https://supabase.com/docs/reference/javascript/next/typescript-support)\n *\n * @typeParam SchemaName - Postgres schema to switch to. Must be a string\n * literal, the same one passed to the constructor. If the schema is not\n * `\"public\"`, this must be supplied manually.\n */\nexport default class PostgrestClient<\n  Database = any,\n  SchemaName extends string & keyof Database = 'public' extends keyof Database\n    ? 'public'\n    : string & keyof Database,\n  Schema extends GenericSchema = Database[SchemaName] extends GenericSchema\n    ? Database[SchemaName]\n    : any\n> {\n  url: string\n  headers: Record<string, string>\n  schemaName?: SchemaName\n  fetch?: Fetch\n\n  // TODO: Add back shouldThrowOnError once we figure out the typings\n  /**\n   * Creates a PostgREST client.\n   *\n   * @param url - URL of the PostgREST endpoint\n   * @param options - Named parameters\n   * @param options.headers - Custom headers\n   * @param options.schema - Postgres schema to switch to\n   * @param options.fetch - Custom fetch\n   */\n  constructor(\n    url: string,\n    {\n      headers = {},\n      schema,\n      fetch,\n    }: {\n      headers?: Record<string, string>\n      schema?: SchemaName\n      fetch?: Fetch\n    } = {}\n  ) {\n    this.url = url\n    this.headers = { ...DEFAULT_HEADERS, ...headers }\n    this.schemaName = schema\n    this.fetch = fetch\n  }\n\n  from<\n    TableName extends string & keyof Schema['Tables'],\n    Table extends Schema['Tables'][TableName]\n  >(relation: TableName): PostgrestQueryBuilder<Schema, Table, TableName>\n  from<ViewName extends string & keyof Schema['Views'], View extends Schema['Views'][ViewName]>(\n    relation: ViewName\n  ): PostgrestQueryBuilder<Schema, View, ViewName>\n  /**\n   * Perform a query on a table or a view.\n   *\n   * @param relation - The table or view name to query\n   */\n  from(relation: string): PostgrestQueryBuilder<Schema, any, any> {\n    const url = new URL(`${this.url}/${relation}`)\n    return new PostgrestQueryBuilder(url, {\n      headers: { ...this.headers },\n      schema: this.schemaName,\n      fetch: this.fetch,\n    })\n  }\n\n  /**\n   * Select a schema to query or perform an function (rpc) call.\n   *\n   * The schema needs to be on the list of exposed schemas inside Supabase.\n   *\n   * @param schema - The schema to query\n   */\n  schema<DynamicSchema extends string & keyof Database>(\n    schema: DynamicSchema\n  ): PostgrestClient<\n    Database,\n    DynamicSchema,\n    Database[DynamicSchema] extends GenericSchema ? Database[DynamicSchema] : any\n  > {\n    return new PostgrestClient(this.url, {\n      headers: this.headers,\n      schema,\n      fetch: this.fetch,\n    })\n  }\n\n  /**\n   * Perform a function call.\n   *\n   * @param fn - The function name to call\n   * @param args - The arguments to pass to the function call\n   * @param options - Named parameters\n   * @param options.head - When set to `true`, `data` will not be returned.\n   * Useful if you only need the count.\n   * @param options.get - When set to `true`, the function will be called with\n   * read-only access mode.\n   * @param options.count - Count algorithm to use to count rows returned by the\n   * function. Only applicable for [set-returning\n   * functions](https://www.postgresql.org/docs/current/functions-srf.html).\n   *\n   * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n   * hood.\n   *\n   * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n   * statistics under the hood.\n   *\n   * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n   * numbers.\n   */\n  rpc<FnName extends string & keyof Schema['Functions'], Fn extends Schema['Functions'][FnName]>(\n    fn: FnName,\n    args: Fn['Args'] = {},\n    {\n      head = false,\n      get = false,\n      count,\n    }: {\n      head?: boolean\n      get?: boolean\n      count?: 'exact' | 'planned' | 'estimated'\n    } = {}\n  ): PostgrestFilterBuilder<\n    Schema,\n    Fn['Returns'] extends any[]\n      ? Fn['Returns'][number] extends Record<string, unknown>\n        ? Fn['Returns'][number]\n        : never\n      : never,\n    Fn['Returns']\n  > {\n    let method: 'HEAD' | 'GET' | 'POST'\n    const url = new URL(`${this.url}/rpc/${fn}`)\n    let body: unknown | undefined\n    if (head || get) {\n      method = head ? 'HEAD' : 'GET'\n      Object.entries(args)\n        // params with undefined value needs to be filtered out, otherwise it'll\n        // show up as `?param=undefined`\n        .filter(([_, value]) => value !== undefined)\n        // array values need special syntax\n        .map(([name, value]) => [name, Array.isArray(value) ? `{${value.join(',')}}` : `${value}`])\n        .forEach(([name, value]) => {\n          url.searchParams.append(name, value)\n        })\n    } else {\n      method = 'POST'\n      body = args\n    }\n\n    const headers = { ...this.headers }\n    if (count) {\n      headers['Prefer'] = `count=${count}`\n    }\n\n    return new PostgrestFilterBuilder({\n      method,\n      url,\n      headers,\n      schema: this.schemaName,\n      body,\n      fetch: this.fetch,\n      allowEmpty: false,\n    } as unknown as PostgrestBuilder<Fn['Returns']>)\n  }\n}\n"]},"metadata":{},"sourceType":"module"}