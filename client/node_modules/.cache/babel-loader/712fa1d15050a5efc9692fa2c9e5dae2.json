{"ast":null,"code":"var _jsxFileName = \"/Users/rickygould/Downloads/web102_unit7lab-main/client/src/pages/ReadPosts.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport Card from '../components/Card';\nimport { supabase } from '../client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ReadPosts = props => {\n  _s();\n\n  const [posts, setPosts] = useState([]);\n  const [sortedPosts, setSortedPosts] = useState([]);\n  const [sortBy, setSortBy] = useState('created_at'); // Default sorting by created time\n\n  useEffect(() => {\n    const fetchPosts = async () => {\n      const {\n        data\n      } = await supabase.from('Posts').select('id, title, author, description, image, created_at, upvotes'); // Include upvotes count here\n\n      setPosts(data);\n    };\n\n    fetchPosts();\n  }, []); // Function to sort posts based on the selected criteria\n\n  const sortPosts = criteria => {\n    const sorted = [...posts].sort((a, b) => {\n      if (criteria === 'created_at') {\n        return new Date(b.created_at) - new Date(a.created_at); // Sort by created time\n      } else if (criteria === 'upvotes') {\n        return b.upvotes - a.upvotes; // Sort by upvotes count\n      }\n\n      return 0;\n    });\n    setSortedPosts(sorted);\n    setSortBy(criteria);\n  }; // Default to sorted posts when posts data changes\n\n\n  useEffect(() => {\n    sortPosts(sortBy);\n  }, [posts, sortBy]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"ReadPosts\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sort-buttons\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => sortPosts('created_at'),\n        children: \"Sort by Created Time\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => sortPosts('upvotes'),\n        children: \"Sort by Upvotes\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this), sortedPosts && sortedPosts.length > 0 ? sortedPosts.map((post, index) => /*#__PURE__*/_jsxDEV(Card, {\n      id: post.id,\n      title: post.title,\n      author: post.author,\n      description: post.description,\n      image: post.image,\n      created_at: post.created_at\n    }, post.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 20\n    }, this) // Pass created_at prop here\n    ) : /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: 'No Challenges Yet ðŸ˜ž'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 21\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ReadPosts, \"QuWVjNVF+l7QFRSpplGtE0IZ53c=\");\n\n_c = ReadPosts;\nexport default ReadPosts;\n\nvar _c;\n\n$RefreshReg$(_c, \"ReadPosts\");","map":{"version":3,"names":["React","useState","useEffect","Card","supabase","ReadPosts","props","posts","setPosts","sortedPosts","setSortedPosts","sortBy","setSortBy","fetchPosts","data","from","select","sortPosts","criteria","sorted","sort","a","b","Date","created_at","upvotes","length","map","post","index","id","title","author","description","image"],"sources":["/Users/rickygould/Downloads/web102_unit7lab-main/client/src/pages/ReadPosts.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Card from '../components/Card';\nimport { supabase } from '../client';\n\nconst ReadPosts = (props) => {\n    const [posts, setPosts] = useState([]);\n    const [sortedPosts, setSortedPosts] = useState([]);\n    const [sortBy, setSortBy] = useState('created_at'); // Default sorting by created time\n\n    useEffect(() => {\n        const fetchPosts = async () => {\n            const { data } = await supabase\n                .from('Posts')\n                .select('id, title, author, description, image, created_at, upvotes'); // Include upvotes count here\n            \n            setPosts(data);\n        };\n\n        fetchPosts();\n    }, []);\n\n    // Function to sort posts based on the selected criteria\n    const sortPosts = (criteria) => {\n        const sorted = [...posts].sort((a, b) => {\n            if (criteria === 'created_at') {\n                return new Date(b.created_at) - new Date(a.created_at); // Sort by created time\n            } else if (criteria === 'upvotes') {\n                return b.upvotes - a.upvotes; // Sort by upvotes count\n            }\n            return 0;\n        });\n        setSortedPosts(sorted);\n        setSortBy(criteria);\n    };\n\n    // Default to sorted posts when posts data changes\n    useEffect(() => {\n        sortPosts(sortBy);\n    }, [posts, sortBy]);\n\n    return (\n        <div className=\"ReadPosts\">\n            <div className=\"sort-buttons\">\n                <button onClick={() => sortPosts('created_at')}>Sort by Created Time</button>\n                <button onClick={() => sortPosts('upvotes')}>Sort by Upvotes</button>\n            </div>\n            {\n                sortedPosts && sortedPosts.length > 0 ?\n                sortedPosts.map((post, index) => \n                   <Card key={post.id} id={post.id} title={post.title} author={post.author} description={post.description} image={post.image} created_at={post.created_at}/> // Pass created_at prop here\n                ) : <h2>{'No Challenges Yet ðŸ˜ž'}</h2>\n            }\n        </div>  \n    );\n};\n\nexport default ReadPosts;\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,SAASC,QAAT,QAAyB,WAAzB;;;AAEA,MAAMC,SAAS,GAAIC,KAAD,IAAW;EAAA;;EACzB,MAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAC,EAAD,CAAlC;EACA,MAAM,CAACQ,WAAD,EAAcC,cAAd,IAAgCT,QAAQ,CAAC,EAAD,CAA9C;EACA,MAAM,CAACU,MAAD,EAASC,SAAT,IAAsBX,QAAQ,CAAC,YAAD,CAApC,CAHyB,CAG2B;;EAEpDC,SAAS,CAAC,MAAM;IACZ,MAAMW,UAAU,GAAG,YAAY;MAC3B,MAAM;QAAEC;MAAF,IAAW,MAAMV,QAAQ,CAC1BW,IADkB,CACb,OADa,EAElBC,MAFkB,CAEX,4DAFW,CAAvB,CAD2B,CAGgD;;MAE3ER,QAAQ,CAACM,IAAD,CAAR;IACH,CAND;;IAQAD,UAAU;EACb,CAVQ,EAUN,EAVM,CAAT,CALyB,CAiBzB;;EACA,MAAMI,SAAS,GAAIC,QAAD,IAAc;IAC5B,MAAMC,MAAM,GAAG,CAAC,GAAGZ,KAAJ,EAAWa,IAAX,CAAgB,CAACC,CAAD,EAAIC,CAAJ,KAAU;MACrC,IAAIJ,QAAQ,KAAK,YAAjB,EAA+B;QAC3B,OAAO,IAAIK,IAAJ,CAASD,CAAC,CAACE,UAAX,IAAyB,IAAID,IAAJ,CAASF,CAAC,CAACG,UAAX,CAAhC,CAD2B,CAC6B;MAC3D,CAFD,MAEO,IAAIN,QAAQ,KAAK,SAAjB,EAA4B;QAC/B,OAAOI,CAAC,CAACG,OAAF,GAAYJ,CAAC,CAACI,OAArB,CAD+B,CACD;MACjC;;MACD,OAAO,CAAP;IACH,CAPc,CAAf;IAQAf,cAAc,CAACS,MAAD,CAAd;IACAP,SAAS,CAACM,QAAD,CAAT;EACH,CAXD,CAlByB,CA+BzB;;;EACAhB,SAAS,CAAC,MAAM;IACZe,SAAS,CAACN,MAAD,CAAT;EACH,CAFQ,EAEN,CAACJ,KAAD,EAAQI,MAAR,CAFM,CAAT;EAIA,oBACI;IAAK,SAAS,EAAC,WAAf;IAAA,wBACI;MAAK,SAAS,EAAC,cAAf;MAAA,wBACI;QAAQ,OAAO,EAAE,MAAMM,SAAS,CAAC,YAAD,CAAhC;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QADJ,eAEI;QAAQ,OAAO,EAAE,MAAMA,SAAS,CAAC,SAAD,CAAhC;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAFJ;IAAA;MAAA;MAAA;MAAA;IAAA,QADJ,EAMQR,WAAW,IAAIA,WAAW,CAACiB,MAAZ,GAAqB,CAApC,GACAjB,WAAW,CAACkB,GAAZ,CAAgB,CAACC,IAAD,EAAOC,KAAP,kBACb,QAAC,IAAD;MAAoB,EAAE,EAAED,IAAI,CAACE,EAA7B;MAAiC,KAAK,EAAEF,IAAI,CAACG,KAA7C;MAAoD,MAAM,EAAEH,IAAI,CAACI,MAAjE;MAAyE,WAAW,EAAEJ,IAAI,CAACK,WAA3F;MAAwG,KAAK,EAAEL,IAAI,CAACM,KAApH;MAA2H,UAAU,EAAEN,IAAI,CAACJ;IAA5I,GAAWI,IAAI,CAACE,EAAhB;MAAA;MAAA;MAAA;IAAA,QADH,CAC6J;IAD7J,CADA,gBAGI;MAAA,UAAK;IAAL;MAAA;MAAA;MAAA;IAAA,QATZ;EAAA;IAAA;IAAA;IAAA;EAAA,QADJ;AAcH,CAlDD;;GAAMzB,S;;KAAAA,S;AAoDN,eAAeA,SAAf"},"metadata":{},"sourceType":"module"}