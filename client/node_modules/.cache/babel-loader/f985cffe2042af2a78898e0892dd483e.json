{"ast":null,"code":"import _regeneratorRuntime from \"/Users/rickygould/Documents/Github/Pug-Website/Downloads/web102_unit7lab-main/client/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _classCallCheck from \"/Users/rickygould/Documents/Github/Pug-Website/Downloads/web102_unit7lab-main/client/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/rickygould/Documents/Github/Pug-Website/Downloads/web102_unit7lab-main/client/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { FunctionsClient } from '@supabase/functions-js';\nimport { PostgrestClient } from '@supabase/postgrest-js';\nimport { RealtimeClient } from '@supabase/realtime-js';\nimport { StorageClient as SupabaseStorageClient } from '@supabase/storage-js';\nimport { DEFAULT_GLOBAL_OPTIONS, DEFAULT_DB_OPTIONS, DEFAULT_AUTH_OPTIONS, DEFAULT_REALTIME_OPTIONS } from './lib/constants';\nimport { fetchWithAuth } from './lib/fetch';\nimport { stripTrailingSlash, applySettingDefaults } from './lib/helpers';\nimport { SupabaseAuthClient } from './lib/SupabaseAuthClient';\n/**\n * Supabase Client.\n *\n * An isomorphic Javascript client for interacting with Postgres.\n */\n\nvar SupabaseClient = /*#__PURE__*/function () {\n  /**\n   * Create a new client for use in the browser.\n   * @param supabaseUrl The unique Supabase URL which is supplied when you create a new project in your project dashboard.\n   * @param supabaseKey The unique Supabase Key which is supplied when you create a new project in your project dashboard.\n   * @param options.db.schema You can switch in between schemas. The schema needs to be on the list of exposed schemas inside Supabase.\n   * @param options.auth.autoRefreshToken Set to \"true\" if you want to automatically refresh the token before expiring.\n   * @param options.auth.persistSession Set to \"true\" if you want to automatically save the user session into local storage.\n   * @param options.auth.detectSessionInUrl Set to \"true\" if you want to automatically detects OAuth grants in the URL and signs in the user.\n   * @param options.realtime Options passed along to realtime-js constructor.\n   * @param options.global.fetch A custom fetch implementation.\n   * @param options.global.headers Any additional headers to send with each network request.\n   */\n  function SupabaseClient(supabaseUrl, supabaseKey, options) {\n    _classCallCheck(this, SupabaseClient);\n\n    var _a, _b, _c, _d, _e, _f, _g, _h;\n\n    this.supabaseUrl = supabaseUrl;\n    this.supabaseKey = supabaseKey;\n    if (!supabaseUrl) throw new Error('supabaseUrl is required.');\n    if (!supabaseKey) throw new Error('supabaseKey is required.');\n\n    var _supabaseUrl = stripTrailingSlash(supabaseUrl);\n\n    this.realtimeUrl = \"\".concat(_supabaseUrl, \"/realtime/v1\").replace(/^http/i, 'ws');\n    this.authUrl = \"\".concat(_supabaseUrl, \"/auth/v1\");\n    this.storageUrl = \"\".concat(_supabaseUrl, \"/storage/v1\");\n    this.functionsUrl = \"\".concat(_supabaseUrl, \"/functions/v1\"); // default storage key uses the supabase project ref as a namespace\n\n    var defaultStorageKey = \"sb-\".concat(new URL(this.authUrl).hostname.split('.')[0], \"-auth-token\");\n    var DEFAULTS = {\n      db: DEFAULT_DB_OPTIONS,\n      realtime: DEFAULT_REALTIME_OPTIONS,\n      auth: Object.assign(Object.assign({}, DEFAULT_AUTH_OPTIONS), {\n        storageKey: defaultStorageKey\n      }),\n      global: DEFAULT_GLOBAL_OPTIONS\n    };\n    var settings = applySettingDefaults(options !== null && options !== void 0 ? options : {}, DEFAULTS);\n    this.storageKey = (_b = (_a = settings.auth) === null || _a === void 0 ? void 0 : _a.storageKey) !== null && _b !== void 0 ? _b : '';\n    this.headers = (_d = (_c = settings.global) === null || _c === void 0 ? void 0 : _c.headers) !== null && _d !== void 0 ? _d : {};\n    this.auth = this._initSupabaseAuthClient((_e = settings.auth) !== null && _e !== void 0 ? _e : {}, this.headers, (_f = settings.global) === null || _f === void 0 ? void 0 : _f.fetch);\n    this.fetch = fetchWithAuth(supabaseKey, this._getAccessToken.bind(this), (_g = settings.global) === null || _g === void 0 ? void 0 : _g.fetch);\n    this.realtime = this._initRealtimeClient(Object.assign({\n      headers: this.headers\n    }, settings.realtime));\n    this.rest = new PostgrestClient(\"\".concat(_supabaseUrl, \"/rest/v1\"), {\n      headers: this.headers,\n      schema: (_h = settings.db) === null || _h === void 0 ? void 0 : _h.schema,\n      fetch: this.fetch\n    });\n\n    this._listenForAuthEvents();\n  }\n  /**\n   * Supabase Functions allows you to deploy and invoke edge functions.\n   */\n\n\n  _createClass(SupabaseClient, [{\n    key: \"functions\",\n    get: function get() {\n      return new FunctionsClient(this.functionsUrl, {\n        headers: this.headers,\n        customFetch: this.fetch\n      });\n    }\n    /**\n     * Supabase Storage allows you to manage user-generated content, such as photos or videos.\n     */\n\n  }, {\n    key: \"storage\",\n    get: function get() {\n      return new SupabaseStorageClient(this.storageUrl, this.headers, this.fetch);\n    }\n    /**\n     * Perform a query on a table or a view.\n     *\n     * @param relation - The table or view name to query\n     */\n\n  }, {\n    key: \"from\",\n    value: function from(relation) {\n      return this.rest.from(relation);\n    } // NOTE: signatures must be kept in sync with PostgrestClient.schema\n\n    /**\n     * Select a schema to query or perform an function (rpc) call.\n     *\n     * The schema needs to be on the list of exposed schemas inside Supabase.\n     *\n     * @param schema - The schema to query\n     */\n\n  }, {\n    key: \"schema\",\n    value: function schema(_schema) {\n      return this.rest.schema(_schema);\n    } // NOTE: signatures must be kept in sync with PostgrestClient.rpc\n\n    /**\n     * Perform a function call.\n     *\n     * @param fn - The function name to call\n     * @param args - The arguments to pass to the function call\n     * @param options - Named parameters\n     * @param options.head - When set to `true`, `data` will not be returned.\n     * Useful if you only need the count.\n     * @param options.get - When set to `true`, the function will be called with\n     * read-only access mode.\n     * @param options.count - Count algorithm to use to count rows returned by the\n     * function. Only applicable for [set-returning\n     * functions](https://www.postgresql.org/docs/current/functions-srf.html).\n     *\n     * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n     * hood.\n     *\n     * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n     * statistics under the hood.\n     *\n     * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n     * numbers.\n     */\n\n  }, {\n    key: \"rpc\",\n    value: function rpc(fn) {\n      var args = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      return this.rest.rpc(fn, args, options);\n    }\n    /**\n     * Creates a Realtime channel with Broadcast, Presence, and Postgres Changes.\n     *\n     * @param {string} name - The name of the Realtime channel.\n     * @param {Object} opts - The options to pass to the Realtime channel.\n     *\n     */\n\n  }, {\n    key: \"channel\",\n    value: function channel(name) {\n      var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n        config: {}\n      };\n      return this.realtime.channel(name, opts);\n    }\n    /**\n     * Returns all Realtime channels.\n     */\n\n  }, {\n    key: \"getChannels\",\n    value: function getChannels() {\n      return this.realtime.getChannels();\n    }\n    /**\n     * Unsubscribes and removes Realtime channel from Realtime client.\n     *\n     * @param {RealtimeChannel} channel - The name of the Realtime channel.\n     *\n     */\n\n  }, {\n    key: \"removeChannel\",\n    value: function removeChannel(channel) {\n      return this.realtime.removeChannel(channel);\n    }\n    /**\n     * Unsubscribes and removes all Realtime channels from Realtime client.\n     */\n\n  }, {\n    key: \"removeAllChannels\",\n    value: function removeAllChannels() {\n      return this.realtime.removeAllChannels();\n    }\n  }, {\n    key: \"_getAccessToken\",\n    value: function _getAccessToken() {\n      var _a, _b;\n\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var _yield$this$auth$getS, data;\n\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.auth.getSession();\n\n              case 2:\n                _yield$this$auth$getS = _context.sent;\n                data = _yield$this$auth$getS.data;\n                return _context.abrupt(\"return\", (_b = (_a = data.session) === null || _a === void 0 ? void 0 : _a.access_token) !== null && _b !== void 0 ? _b : null);\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n    }\n  }, {\n    key: \"_initSupabaseAuthClient\",\n    value: function _initSupabaseAuthClient(_ref, headers, fetch) {\n      var autoRefreshToken = _ref.autoRefreshToken,\n          persistSession = _ref.persistSession,\n          detectSessionInUrl = _ref.detectSessionInUrl,\n          storage = _ref.storage,\n          storageKey = _ref.storageKey,\n          flowType = _ref.flowType,\n          debug = _ref.debug;\n      var authHeaders = {\n        Authorization: \"Bearer \".concat(this.supabaseKey),\n        apikey: \"\".concat(this.supabaseKey)\n      };\n      return new SupabaseAuthClient({\n        url: this.authUrl,\n        headers: Object.assign(Object.assign({}, authHeaders), headers),\n        storageKey: storageKey,\n        autoRefreshToken: autoRefreshToken,\n        persistSession: persistSession,\n        detectSessionInUrl: detectSessionInUrl,\n        storage: storage,\n        flowType: flowType,\n        debug: debug,\n        fetch: fetch\n      });\n    }\n  }, {\n    key: \"_initRealtimeClient\",\n    value: function _initRealtimeClient(options) {\n      return new RealtimeClient(this.realtimeUrl, Object.assign(Object.assign({}, options), {\n        params: Object.assign({\n          apikey: this.supabaseKey\n        }, options === null || options === void 0 ? void 0 : options.params)\n      }));\n    }\n  }, {\n    key: \"_listenForAuthEvents\",\n    value: function _listenForAuthEvents() {\n      var _this = this;\n\n      var data = this.auth.onAuthStateChange(function (event, session) {\n        _this._handleTokenChanged(event, 'CLIENT', session === null || session === void 0 ? void 0 : session.access_token);\n      });\n      return data;\n    }\n  }, {\n    key: \"_handleTokenChanged\",\n    value: function _handleTokenChanged(event, source, token) {\n      if ((event === 'TOKEN_REFRESHED' || event === 'SIGNED_IN') && this.changedAccessToken !== token) {\n        // Token has changed\n        this.realtime.setAuth(token !== null && token !== void 0 ? token : null);\n        this.changedAccessToken = token;\n      } else if (event === 'SIGNED_OUT') {\n        // Token is removed\n        this.realtime.setAuth(this.supabaseKey);\n        if (source == 'STORAGE') this.auth.signOut();\n        this.changedAccessToken = undefined;\n      }\n    }\n  }]);\n\n  return SupabaseClient;\n}();\n\nexport { SupabaseClient as default };","map":{"version":3,"mappings":"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","names":["FunctionsClient","PostgrestClient","RealtimeClient","StorageClient","SupabaseStorageClient","DEFAULT_GLOBAL_OPTIONS","DEFAULT_DB_OPTIONS","DEFAULT_AUTH_OPTIONS","DEFAULT_REALTIME_OPTIONS","fetchWithAuth","stripTrailingSlash","applySettingDefaults","SupabaseAuthClient","SupabaseClient","supabaseUrl","supabaseKey","options","Error","_supabaseUrl","realtimeUrl","replace","authUrl","storageUrl","functionsUrl","defaultStorageKey","URL","hostname","split","DEFAULTS","db","realtime","auth","storageKey","global","settings","_a","_b","headers","_c","_d","_initSupabaseAuthClient","_e","_f","fetch","_getAccessToken","bind","_g","_initRealtimeClient","Object","rest","schema","_h","_listenForAuthEvents","customFetch","relation","from","fn","args","rpc","name","opts","config","channel","getChannels","removeChannel","removeAllChannels","getSession","data","session","access_token","autoRefreshToken","persistSession","detectSessionInUrl","storage","flowType","debug","authHeaders","Authorization","apikey","url","params","onAuthStateChange","event","_handleTokenChanged","source","token","changedAccessToken","setAuth","signOut","undefined"],"sources":["/Users/rickygould/Documents/Github/Pug-Website/Downloads/web102_unit7lab-main/client/node_modules/@supabase/supabase-js/src/SupabaseClient.ts"],"sourcesContent":["import { FunctionsClient } from '@supabase/functions-js'\nimport { AuthChangeEvent } from '@supabase/auth-js'\nimport {\n  PostgrestClient,\n  PostgrestFilterBuilder,\n  PostgrestQueryBuilder,\n} from '@supabase/postgrest-js'\nimport {\n  RealtimeChannel,\n  RealtimeChannelOptions,\n  RealtimeClient,\n  RealtimeClientOptions,\n} from '@supabase/realtime-js'\nimport { StorageClient as SupabaseStorageClient } from '@supabase/storage-js'\nimport {\n  DEFAULT_GLOBAL_OPTIONS,\n  DEFAULT_DB_OPTIONS,\n  DEFAULT_AUTH_OPTIONS,\n  DEFAULT_REALTIME_OPTIONS,\n} from './lib/constants'\nimport { fetchWithAuth } from './lib/fetch'\nimport { stripTrailingSlash, applySettingDefaults } from './lib/helpers'\nimport { SupabaseAuthClient } from './lib/SupabaseAuthClient'\nimport { Fetch, GenericSchema, SupabaseClientOptions, SupabaseAuthClientOptions } from './lib/types'\n\n/**\n * Supabase Client.\n *\n * An isomorphic Javascript client for interacting with Postgres.\n */\nexport default class SupabaseClient<\n  Database = any,\n  SchemaName extends string & keyof Database = 'public' extends keyof Database\n    ? 'public'\n    : string & keyof Database,\n  Schema extends GenericSchema = Database[SchemaName] extends GenericSchema\n    ? Database[SchemaName]\n    : any\n> {\n  /**\n   * Supabase Auth allows you to create and manage user sessions for access to data that is secured by access policies.\n   */\n  auth: SupabaseAuthClient\n  realtime: RealtimeClient\n\n  protected realtimeUrl: string\n  protected authUrl: string\n  protected storageUrl: string\n  protected functionsUrl: string\n  protected rest: PostgrestClient<Database, SchemaName>\n  protected storageKey: string\n  protected fetch?: Fetch\n  protected changedAccessToken?: string\n\n  protected headers: Record<string, string>\n\n  /**\n   * Create a new client for use in the browser.\n   * @param supabaseUrl The unique Supabase URL which is supplied when you create a new project in your project dashboard.\n   * @param supabaseKey The unique Supabase Key which is supplied when you create a new project in your project dashboard.\n   * @param options.db.schema You can switch in between schemas. The schema needs to be on the list of exposed schemas inside Supabase.\n   * @param options.auth.autoRefreshToken Set to \"true\" if you want to automatically refresh the token before expiring.\n   * @param options.auth.persistSession Set to \"true\" if you want to automatically save the user session into local storage.\n   * @param options.auth.detectSessionInUrl Set to \"true\" if you want to automatically detects OAuth grants in the URL and signs in the user.\n   * @param options.realtime Options passed along to realtime-js constructor.\n   * @param options.global.fetch A custom fetch implementation.\n   * @param options.global.headers Any additional headers to send with each network request.\n   */\n  constructor(\n    protected supabaseUrl: string,\n    protected supabaseKey: string,\n    options?: SupabaseClientOptions<SchemaName>\n  ) {\n    if (!supabaseUrl) throw new Error('supabaseUrl is required.')\n    if (!supabaseKey) throw new Error('supabaseKey is required.')\n\n    const _supabaseUrl = stripTrailingSlash(supabaseUrl)\n\n    this.realtimeUrl = `${_supabaseUrl}/realtime/v1`.replace(/^http/i, 'ws')\n    this.authUrl = `${_supabaseUrl}/auth/v1`\n    this.storageUrl = `${_supabaseUrl}/storage/v1`\n    this.functionsUrl = `${_supabaseUrl}/functions/v1`\n\n    // default storage key uses the supabase project ref as a namespace\n    const defaultStorageKey = `sb-${new URL(this.authUrl).hostname.split('.')[0]}-auth-token`\n    const DEFAULTS = {\n      db: DEFAULT_DB_OPTIONS,\n      realtime: DEFAULT_REALTIME_OPTIONS,\n      auth: { ...DEFAULT_AUTH_OPTIONS, storageKey: defaultStorageKey },\n      global: DEFAULT_GLOBAL_OPTIONS,\n    }\n\n    const settings = applySettingDefaults(options ?? {}, DEFAULTS)\n\n    this.storageKey = settings.auth?.storageKey ?? ''\n    this.headers = settings.global?.headers ?? {}\n\n    this.auth = this._initSupabaseAuthClient(\n      settings.auth ?? {},\n      this.headers,\n      settings.global?.fetch\n    )\n    this.fetch = fetchWithAuth(supabaseKey, this._getAccessToken.bind(this), settings.global?.fetch)\n\n    this.realtime = this._initRealtimeClient({ headers: this.headers, ...settings.realtime })\n    this.rest = new PostgrestClient(`${_supabaseUrl}/rest/v1`, {\n      headers: this.headers,\n      schema: settings.db?.schema,\n      fetch: this.fetch,\n    })\n\n    this._listenForAuthEvents()\n  }\n\n  /**\n   * Supabase Functions allows you to deploy and invoke edge functions.\n   */\n  get functions() {\n    return new FunctionsClient(this.functionsUrl, {\n      headers: this.headers,\n      customFetch: this.fetch,\n    })\n  }\n\n  /**\n   * Supabase Storage allows you to manage user-generated content, such as photos or videos.\n   */\n  get storage() {\n    return new SupabaseStorageClient(this.storageUrl, this.headers, this.fetch)\n  }\n\n  // NOTE: signatures must be kept in sync with PostgrestClient.from\n  from<\n    TableName extends string & keyof Schema['Tables'],\n    Table extends Schema['Tables'][TableName]\n  >(relation: TableName): PostgrestQueryBuilder<Schema, Table, TableName>\n  from<ViewName extends string & keyof Schema['Views'], View extends Schema['Views'][ViewName]>(\n    relation: ViewName\n  ): PostgrestQueryBuilder<Schema, View, ViewName>\n  /**\n   * Perform a query on a table or a view.\n   *\n   * @param relation - The table or view name to query\n   */\n  from(relation: string): PostgrestQueryBuilder<Schema, any, any> {\n    return this.rest.from(relation)\n  }\n\n  // NOTE: signatures must be kept in sync with PostgrestClient.schema\n  /**\n   * Select a schema to query or perform an function (rpc) call.\n   *\n   * The schema needs to be on the list of exposed schemas inside Supabase.\n   *\n   * @param schema - The schema to query\n   */\n  schema<DynamicSchema extends string & keyof Database>(\n    schema: DynamicSchema\n  ): PostgrestClient<\n    Database,\n    DynamicSchema,\n    Database[DynamicSchema] extends GenericSchema ? Database[DynamicSchema] : any\n  > {\n    return this.rest.schema<DynamicSchema>(schema)\n  }\n\n  // NOTE: signatures must be kept in sync with PostgrestClient.rpc\n  /**\n   * Perform a function call.\n   *\n   * @param fn - The function name to call\n   * @param args - The arguments to pass to the function call\n   * @param options - Named parameters\n   * @param options.head - When set to `true`, `data` will not be returned.\n   * Useful if you only need the count.\n   * @param options.get - When set to `true`, the function will be called with\n   * read-only access mode.\n   * @param options.count - Count algorithm to use to count rows returned by the\n   * function. Only applicable for [set-returning\n   * functions](https://www.postgresql.org/docs/current/functions-srf.html).\n   *\n   * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n   * hood.\n   *\n   * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n   * statistics under the hood.\n   *\n   * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n   * numbers.\n   */\n  rpc<FnName extends string & keyof Schema['Functions'], Fn extends Schema['Functions'][FnName]>(\n    fn: FnName,\n    args: Fn['Args'] = {},\n    options: {\n      head?: boolean\n      get?: boolean\n      count?: 'exact' | 'planned' | 'estimated'\n    } = {}\n  ): PostgrestFilterBuilder<\n    Schema,\n    Fn['Returns'] extends any[]\n      ? Fn['Returns'][number] extends Record<string, unknown>\n        ? Fn['Returns'][number]\n        : never\n      : never,\n    Fn['Returns']\n  > {\n    return this.rest.rpc(fn, args, options)\n  }\n\n  /**\n   * Creates a Realtime channel with Broadcast, Presence, and Postgres Changes.\n   *\n   * @param {string} name - The name of the Realtime channel.\n   * @param {Object} opts - The options to pass to the Realtime channel.\n   *\n   */\n  channel(name: string, opts: RealtimeChannelOptions = { config: {} }): RealtimeChannel {\n    return this.realtime.channel(name, opts)\n  }\n\n  /**\n   * Returns all Realtime channels.\n   */\n  getChannels(): RealtimeChannel[] {\n    return this.realtime.getChannels()\n  }\n\n  /**\n   * Unsubscribes and removes Realtime channel from Realtime client.\n   *\n   * @param {RealtimeChannel} channel - The name of the Realtime channel.\n   *\n   */\n  removeChannel(channel: RealtimeChannel): Promise<'ok' | 'timed out' | 'error'> {\n    return this.realtime.removeChannel(channel)\n  }\n\n  /**\n   * Unsubscribes and removes all Realtime channels from Realtime client.\n   */\n  removeAllChannels(): Promise<('ok' | 'timed out' | 'error')[]> {\n    return this.realtime.removeAllChannels()\n  }\n\n  private async _getAccessToken() {\n    const { data } = await this.auth.getSession()\n\n    return data.session?.access_token ?? null\n  }\n\n  private _initSupabaseAuthClient(\n    {\n      autoRefreshToken,\n      persistSession,\n      detectSessionInUrl,\n      storage,\n      storageKey,\n      flowType,\n      debug,\n    }: SupabaseAuthClientOptions,\n    headers?: Record<string, string>,\n    fetch?: Fetch\n  ) {\n    const authHeaders = {\n      Authorization: `Bearer ${this.supabaseKey}`,\n      apikey: `${this.supabaseKey}`,\n    }\n    return new SupabaseAuthClient({\n      url: this.authUrl,\n      headers: { ...authHeaders, ...headers },\n      storageKey: storageKey,\n      autoRefreshToken,\n      persistSession,\n      detectSessionInUrl,\n      storage,\n      flowType,\n      debug,\n      fetch,\n    })\n  }\n\n  private _initRealtimeClient(options: RealtimeClientOptions) {\n    return new RealtimeClient(this.realtimeUrl, {\n      ...options,\n      params: { ...{ apikey: this.supabaseKey }, ...options?.params },\n    })\n  }\n\n  private _listenForAuthEvents() {\n    let data = this.auth.onAuthStateChange((event, session) => {\n      this._handleTokenChanged(event, 'CLIENT', session?.access_token)\n    })\n    return data\n  }\n\n  private _handleTokenChanged(\n    event: AuthChangeEvent,\n    source: 'CLIENT' | 'STORAGE',\n    token?: string\n  ) {\n    if (\n      (event === 'TOKEN_REFRESHED' || event === 'SIGNED_IN') &&\n      this.changedAccessToken !== token\n    ) {\n      // Token has changed\n      this.realtime.setAuth(token ?? null)\n\n      this.changedAccessToken = token\n    } else if (event === 'SIGNED_OUT') {\n      // Token is removed\n      this.realtime.setAuth(this.supabaseKey)\n      if (source == 'STORAGE') this.auth.signOut()\n      this.changedAccessToken = undefined\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}