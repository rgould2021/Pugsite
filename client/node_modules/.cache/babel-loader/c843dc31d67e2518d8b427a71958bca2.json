{"ast":null,"code":"import _toConsumableArray from \"/Users/rickygould/Documents/Github/Pug-Website/Downloads/web102_unit7lab-main/client/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _classCallCheck from \"/Users/rickygould/Documents/Github/Pug-Website/Downloads/web102_unit7lab-main/client/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/rickygould/Documents/Github/Pug-Website/Downloads/web102_unit7lab-main/client/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n\n/*\n  This file draws heavily from https://github.com/phoenixframework/phoenix/blob/d344ec0a732ab4ee204215b31de69cf4be72e3bf/assets/js/phoenix/presence.js\n  License: https://github.com/phoenixframework/phoenix/blob/d344ec0a732ab4ee204215b31de69cf4be72e3bf/LICENSE.md\n*/\nexport var REALTIME_PRESENCE_LISTEN_EVENTS;\n\n(function (REALTIME_PRESENCE_LISTEN_EVENTS) {\n  REALTIME_PRESENCE_LISTEN_EVENTS[\"SYNC\"] = \"sync\";\n  REALTIME_PRESENCE_LISTEN_EVENTS[\"JOIN\"] = \"join\";\n  REALTIME_PRESENCE_LISTEN_EVENTS[\"LEAVE\"] = \"leave\";\n})(REALTIME_PRESENCE_LISTEN_EVENTS || (REALTIME_PRESENCE_LISTEN_EVENTS = {}));\n\nvar RealtimePresence = /*#__PURE__*/function () {\n  /**\n   * Initializes the Presence.\n   *\n   * @param channel - The RealtimeChannel\n   * @param opts - The options,\n   *        for example `{events: {state: 'state', diff: 'diff'}}`\n   */\n  function RealtimePresence(channel, opts) {\n    var _this = this;\n\n    _classCallCheck(this, RealtimePresence);\n\n    this.channel = channel;\n    this.state = {};\n    this.pendingDiffs = [];\n    this.joinRef = null;\n    this.caller = {\n      onJoin: function onJoin() {},\n      onLeave: function onLeave() {},\n      onSync: function onSync() {}\n    };\n    var events = (opts === null || opts === void 0 ? void 0 : opts.events) || {\n      state: 'presence_state',\n      diff: 'presence_diff'\n    };\n\n    this.channel._on(events.state, {}, function (newState) {\n      var _this$caller = _this.caller,\n          onJoin = _this$caller.onJoin,\n          onLeave = _this$caller.onLeave,\n          onSync = _this$caller.onSync;\n      _this.joinRef = _this.channel._joinRef();\n      _this.state = RealtimePresence.syncState(_this.state, newState, onJoin, onLeave);\n\n      _this.pendingDiffs.forEach(function (diff) {\n        _this.state = RealtimePresence.syncDiff(_this.state, diff, onJoin, onLeave);\n      });\n\n      _this.pendingDiffs = [];\n      onSync();\n    });\n\n    this.channel._on(events.diff, {}, function (diff) {\n      var _this$caller2 = _this.caller,\n          onJoin = _this$caller2.onJoin,\n          onLeave = _this$caller2.onLeave,\n          onSync = _this$caller2.onSync;\n\n      if (_this.inPendingSyncState()) {\n        _this.pendingDiffs.push(diff);\n      } else {\n        _this.state = RealtimePresence.syncDiff(_this.state, diff, onJoin, onLeave);\n        onSync();\n      }\n    });\n\n    this.onJoin(function (key, currentPresences, newPresences) {\n      _this.channel._trigger('presence', {\n        event: 'join',\n        key: key,\n        currentPresences: currentPresences,\n        newPresences: newPresences\n      });\n    });\n    this.onLeave(function (key, currentPresences, leftPresences) {\n      _this.channel._trigger('presence', {\n        event: 'leave',\n        key: key,\n        currentPresences: currentPresences,\n        leftPresences: leftPresences\n      });\n    });\n    this.onSync(function () {\n      _this.channel._trigger('presence', {\n        event: 'sync'\n      });\n    });\n  }\n  /**\n   * Used to sync the list of presences on the server with the\n   * client's state.\n   *\n   * An optional `onJoin` and `onLeave` callback can be provided to\n   * react to changes in the client's local presences across\n   * disconnects and reconnects with the server.\n   *\n   * @internal\n   */\n\n\n  _createClass(RealtimePresence, [{\n    key: \"onJoin\",\n    value:\n    /** @internal */\n    function onJoin(callback) {\n      this.caller.onJoin = callback;\n    }\n    /** @internal */\n\n  }, {\n    key: \"onLeave\",\n    value: function onLeave(callback) {\n      this.caller.onLeave = callback;\n    }\n    /** @internal */\n\n  }, {\n    key: \"onSync\",\n    value: function onSync(callback) {\n      this.caller.onSync = callback;\n    }\n    /** @internal */\n\n  }, {\n    key: \"inPendingSyncState\",\n    value: function inPendingSyncState() {\n      return !this.joinRef || this.joinRef !== this.channel._joinRef();\n    }\n  }], [{\n    key: \"syncState\",\n    value: function syncState(currentState, newState, onJoin, onLeave) {\n      var state = this.cloneDeep(currentState);\n      var transformedState = this.transformState(newState);\n      var joins = {};\n      var leaves = {};\n      this.map(state, function (key, presences) {\n        if (!transformedState[key]) {\n          leaves[key] = presences;\n        }\n      });\n      this.map(transformedState, function (key, newPresences) {\n        var currentPresences = state[key];\n\n        if (currentPresences) {\n          var newPresenceRefs = newPresences.map(function (m) {\n            return m.presence_ref;\n          });\n          var curPresenceRefs = currentPresences.map(function (m) {\n            return m.presence_ref;\n          });\n          var joinedPresences = newPresences.filter(function (m) {\n            return curPresenceRefs.indexOf(m.presence_ref) < 0;\n          });\n          var leftPresences = currentPresences.filter(function (m) {\n            return newPresenceRefs.indexOf(m.presence_ref) < 0;\n          });\n\n          if (joinedPresences.length > 0) {\n            joins[key] = joinedPresences;\n          }\n\n          if (leftPresences.length > 0) {\n            leaves[key] = leftPresences;\n          }\n        } else {\n          joins[key] = newPresences;\n        }\n      });\n      return this.syncDiff(state, {\n        joins: joins,\n        leaves: leaves\n      }, onJoin, onLeave);\n    }\n    /**\n     * Used to sync a diff of presence join and leave events from the\n     * server, as they happen.\n     *\n     * Like `syncState`, `syncDiff` accepts optional `onJoin` and\n     * `onLeave` callbacks to react to a user joining or leaving from a\n     * device.\n     *\n     * @internal\n     */\n\n  }, {\n    key: \"syncDiff\",\n    value: function syncDiff(state, diff, onJoin, onLeave) {\n      var _this2 = this;\n\n      var _joins$leaves = {\n        joins: this.transformState(diff.joins),\n        leaves: this.transformState(diff.leaves)\n      },\n          joins = _joins$leaves.joins,\n          leaves = _joins$leaves.leaves;\n\n      if (!onJoin) {\n        onJoin = function onJoin() {};\n      }\n\n      if (!onLeave) {\n        onLeave = function onLeave() {};\n      }\n\n      this.map(joins, function (key, newPresences) {\n        var _a;\n\n        var currentPresences = (_a = state[key]) !== null && _a !== void 0 ? _a : [];\n        state[key] = _this2.cloneDeep(newPresences);\n\n        if (currentPresences.length > 0) {\n          var _state$key;\n\n          var joinedPresenceRefs = state[key].map(function (m) {\n            return m.presence_ref;\n          });\n          var curPresences = currentPresences.filter(function (m) {\n            return joinedPresenceRefs.indexOf(m.presence_ref) < 0;\n          });\n\n          (_state$key = state[key]).unshift.apply(_state$key, _toConsumableArray(curPresences));\n        }\n\n        onJoin(key, currentPresences, newPresences);\n      });\n      this.map(leaves, function (key, leftPresences) {\n        var currentPresences = state[key];\n        if (!currentPresences) return;\n        var presenceRefsToRemove = leftPresences.map(function (m) {\n          return m.presence_ref;\n        });\n        currentPresences = currentPresences.filter(function (m) {\n          return presenceRefsToRemove.indexOf(m.presence_ref) < 0;\n        });\n        state[key] = currentPresences;\n        onLeave(key, currentPresences, leftPresences);\n        if (currentPresences.length === 0) delete state[key];\n      });\n      return state;\n    }\n    /** @internal */\n\n  }, {\n    key: \"map\",\n    value: function map(obj, func) {\n      return Object.getOwnPropertyNames(obj).map(function (key) {\n        return func(key, obj[key]);\n      });\n    }\n    /**\n     * Remove 'metas' key\n     * Change 'phx_ref' to 'presence_ref'\n     * Remove 'phx_ref' and 'phx_ref_prev'\n     *\n     * @example\n     * // returns {\n     *  abc123: [\n     *    { presence_ref: '2', user_id: 1 },\n     *    { presence_ref: '3', user_id: 2 }\n     *  ]\n     * }\n     * RealtimePresence.transformState({\n     *  abc123: {\n     *    metas: [\n     *      { phx_ref: '2', phx_ref_prev: '1' user_id: 1 },\n     *      { phx_ref: '3', user_id: 2 }\n     *    ]\n     *  }\n     * })\n     *\n     * @internal\n     */\n\n  }, {\n    key: \"transformState\",\n    value: function transformState(state) {\n      state = this.cloneDeep(state);\n      return Object.getOwnPropertyNames(state).reduce(function (newState, key) {\n        var presences = state[key];\n\n        if ('metas' in presences) {\n          newState[key] = presences.metas.map(function (presence) {\n            presence['presence_ref'] = presence['phx_ref'];\n            delete presence['phx_ref'];\n            delete presence['phx_ref_prev'];\n            return presence;\n          });\n        } else {\n          newState[key] = presences;\n        }\n\n        return newState;\n      }, {});\n    }\n    /** @internal */\n\n  }, {\n    key: \"cloneDeep\",\n    value: function cloneDeep(obj) {\n      return JSON.parse(JSON.stringify(obj));\n    }\n  }]);\n\n  return RealtimePresence;\n}();\n\nexport { RealtimePresence as default };","map":{"version":3,"mappings":"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","names":["REALTIME_PRESENCE_LISTEN_EVENTS","RealtimePresence","channel","opts","onJoin","onLeave","onSync","events","state","diff","_on","newState","caller","joinRef","_joinRef","syncState","pendingDiffs","forEach","syncDiff","inPendingSyncState","push","key","currentPresences","newPresences","_trigger","event","leftPresences","callback","currentState","cloneDeep","transformedState","transformState","joins","leaves","map","presences","newPresenceRefs","m","presence_ref","curPresenceRefs","joinedPresences","filter","indexOf","length","_a","joinedPresenceRefs","curPresences","unshift","presenceRefsToRemove","obj","func","Object","getOwnPropertyNames","reduce","metas","presence","JSON","parse","stringify"],"sources":["/Users/rickygould/Documents/Github/Pug-Website/Downloads/web102_unit7lab-main/client/node_modules/@supabase/realtime-js/src/RealtimePresence.ts"],"sourcesContent":["/*\n  This file draws heavily from https://github.com/phoenixframework/phoenix/blob/d344ec0a732ab4ee204215b31de69cf4be72e3bf/assets/js/phoenix/presence.js\n  License: https://github.com/phoenixframework/phoenix/blob/d344ec0a732ab4ee204215b31de69cf4be72e3bf/LICENSE.md\n*/\n\nimport type {\n  PresenceOpts,\n  PresenceOnJoinCallback,\n  PresenceOnLeaveCallback,\n} from 'phoenix'\nimport type RealtimeChannel from './RealtimeChannel'\n\ntype Presence<T extends { [key: string]: any } = {}> = {\n  presence_ref: string\n} & T\n\nexport type RealtimePresenceState<T extends { [key: string]: any } = {}> = {\n  [key: string]: Presence<T>[]\n}\n\nexport type RealtimePresenceJoinPayload<T extends { [key: string]: any }> = {\n  event: `${REALTIME_PRESENCE_LISTEN_EVENTS.JOIN}`\n  key: string\n  currentPresences: Presence<T>[]\n  newPresences: Presence<T>[]\n}\n\nexport type RealtimePresenceLeavePayload<T extends { [key: string]: any }> = {\n  event: `${REALTIME_PRESENCE_LISTEN_EVENTS.LEAVE}`\n  key: string\n  currentPresences: Presence<T>[]\n  leftPresences: Presence<T>[]\n}\n\nexport enum REALTIME_PRESENCE_LISTEN_EVENTS {\n  SYNC = 'sync',\n  JOIN = 'join',\n  LEAVE = 'leave',\n}\n\ntype PresenceDiff = {\n  joins: RealtimePresenceState\n  leaves: RealtimePresenceState\n}\n\ntype RawPresenceState = {\n  [key: string]: {\n    metas: {\n      phx_ref?: string\n      phx_ref_prev?: string\n      [key: string]: any\n    }[]\n  }\n}\n\ntype RawPresenceDiff = {\n  joins: RawPresenceState\n  leaves: RawPresenceState\n}\n\ntype PresenceChooser<T> = (key: string, presences: Presence[]) => T\n\nexport default class RealtimePresence {\n  state: RealtimePresenceState = {}\n  pendingDiffs: RawPresenceDiff[] = []\n  joinRef: string | null = null\n  caller: {\n    onJoin: PresenceOnJoinCallback\n    onLeave: PresenceOnLeaveCallback\n    onSync: () => void\n  } = {\n    onJoin: () => {},\n    onLeave: () => {},\n    onSync: () => {},\n  }\n\n  /**\n   * Initializes the Presence.\n   *\n   * @param channel - The RealtimeChannel\n   * @param opts - The options,\n   *        for example `{events: {state: 'state', diff: 'diff'}}`\n   */\n  constructor(public channel: RealtimeChannel, opts?: PresenceOpts) {\n    const events = opts?.events || {\n      state: 'presence_state',\n      diff: 'presence_diff',\n    }\n\n    this.channel._on(events.state, {}, (newState: RawPresenceState) => {\n      const { onJoin, onLeave, onSync } = this.caller\n\n      this.joinRef = this.channel._joinRef()\n\n      this.state = RealtimePresence.syncState(\n        this.state,\n        newState,\n        onJoin,\n        onLeave\n      )\n\n      this.pendingDiffs.forEach((diff) => {\n        this.state = RealtimePresence.syncDiff(\n          this.state,\n          diff,\n          onJoin,\n          onLeave\n        )\n      })\n\n      this.pendingDiffs = []\n\n      onSync()\n    })\n\n    this.channel._on(events.diff, {}, (diff: RawPresenceDiff) => {\n      const { onJoin, onLeave, onSync } = this.caller\n\n      if (this.inPendingSyncState()) {\n        this.pendingDiffs.push(diff)\n      } else {\n        this.state = RealtimePresence.syncDiff(\n          this.state,\n          diff,\n          onJoin,\n          onLeave\n        )\n\n        onSync()\n      }\n    })\n\n    this.onJoin((key, currentPresences, newPresences) => {\n      this.channel._trigger('presence', {\n        event: 'join',\n        key,\n        currentPresences,\n        newPresences,\n      })\n    })\n\n    this.onLeave((key, currentPresences, leftPresences) => {\n      this.channel._trigger('presence', {\n        event: 'leave',\n        key,\n        currentPresences,\n        leftPresences,\n      })\n    })\n\n    this.onSync(() => {\n      this.channel._trigger('presence', { event: 'sync' })\n    })\n  }\n\n  /**\n   * Used to sync the list of presences on the server with the\n   * client's state.\n   *\n   * An optional `onJoin` and `onLeave` callback can be provided to\n   * react to changes in the client's local presences across\n   * disconnects and reconnects with the server.\n   *\n   * @internal\n   */\n  private static syncState(\n    currentState: RealtimePresenceState,\n    newState: RawPresenceState | RealtimePresenceState,\n    onJoin: PresenceOnJoinCallback,\n    onLeave: PresenceOnLeaveCallback\n  ): RealtimePresenceState {\n    const state = this.cloneDeep(currentState)\n    const transformedState = this.transformState(newState)\n    const joins: RealtimePresenceState = {}\n    const leaves: RealtimePresenceState = {}\n\n    this.map(state, (key: string, presences: Presence[]) => {\n      if (!transformedState[key]) {\n        leaves[key] = presences\n      }\n    })\n\n    this.map(transformedState, (key, newPresences: Presence[]) => {\n      const currentPresences: Presence[] = state[key]\n\n      if (currentPresences) {\n        const newPresenceRefs = newPresences.map(\n          (m: Presence) => m.presence_ref\n        )\n        const curPresenceRefs = currentPresences.map(\n          (m: Presence) => m.presence_ref\n        )\n        const joinedPresences: Presence[] = newPresences.filter(\n          (m: Presence) => curPresenceRefs.indexOf(m.presence_ref) < 0\n        )\n        const leftPresences: Presence[] = currentPresences.filter(\n          (m: Presence) => newPresenceRefs.indexOf(m.presence_ref) < 0\n        )\n\n        if (joinedPresences.length > 0) {\n          joins[key] = joinedPresences\n        }\n\n        if (leftPresences.length > 0) {\n          leaves[key] = leftPresences\n        }\n      } else {\n        joins[key] = newPresences\n      }\n    })\n\n    return this.syncDiff(state, { joins, leaves }, onJoin, onLeave)\n  }\n\n  /**\n   * Used to sync a diff of presence join and leave events from the\n   * server, as they happen.\n   *\n   * Like `syncState`, `syncDiff` accepts optional `onJoin` and\n   * `onLeave` callbacks to react to a user joining or leaving from a\n   * device.\n   *\n   * @internal\n   */\n  private static syncDiff(\n    state: RealtimePresenceState,\n    diff: RawPresenceDiff | PresenceDiff,\n    onJoin: PresenceOnJoinCallback,\n    onLeave: PresenceOnLeaveCallback\n  ): RealtimePresenceState {\n    const { joins, leaves } = {\n      joins: this.transformState(diff.joins),\n      leaves: this.transformState(diff.leaves),\n    }\n\n    if (!onJoin) {\n      onJoin = () => {}\n    }\n\n    if (!onLeave) {\n      onLeave = () => {}\n    }\n\n    this.map(joins, (key, newPresences: Presence[]) => {\n      const currentPresences: Presence[] = state[key] ?? []\n      state[key] = this.cloneDeep(newPresences)\n\n      if (currentPresences.length > 0) {\n        const joinedPresenceRefs = state[key].map(\n          (m: Presence) => m.presence_ref\n        )\n        const curPresences: Presence[] = currentPresences.filter(\n          (m: Presence) => joinedPresenceRefs.indexOf(m.presence_ref) < 0\n        )\n\n        state[key].unshift(...curPresences)\n      }\n\n      onJoin(key, currentPresences, newPresences)\n    })\n\n    this.map(leaves, (key, leftPresences: Presence[]) => {\n      let currentPresences: Presence[] = state[key]\n\n      if (!currentPresences) return\n\n      const presenceRefsToRemove = leftPresences.map(\n        (m: Presence) => m.presence_ref\n      )\n      currentPresences = currentPresences.filter(\n        (m: Presence) => presenceRefsToRemove.indexOf(m.presence_ref) < 0\n      )\n\n      state[key] = currentPresences\n\n      onLeave(key, currentPresences, leftPresences)\n\n      if (currentPresences.length === 0) delete state[key]\n    })\n\n    return state\n  }\n\n  /** @internal */\n  private static map<T = any>(\n    obj: RealtimePresenceState,\n    func: PresenceChooser<T>\n  ): T[] {\n    return Object.getOwnPropertyNames(obj).map((key) => func(key, obj[key]))\n  }\n\n  /**\n   * Remove 'metas' key\n   * Change 'phx_ref' to 'presence_ref'\n   * Remove 'phx_ref' and 'phx_ref_prev'\n   *\n   * @example\n   * // returns {\n   *  abc123: [\n   *    { presence_ref: '2', user_id: 1 },\n   *    { presence_ref: '3', user_id: 2 }\n   *  ]\n   * }\n   * RealtimePresence.transformState({\n   *  abc123: {\n   *    metas: [\n   *      { phx_ref: '2', phx_ref_prev: '1' user_id: 1 },\n   *      { phx_ref: '3', user_id: 2 }\n   *    ]\n   *  }\n   * })\n   *\n   * @internal\n   */\n  private static transformState(\n    state: RawPresenceState | RealtimePresenceState\n  ): RealtimePresenceState {\n    state = this.cloneDeep(state)\n\n    return Object.getOwnPropertyNames(state).reduce((newState, key) => {\n      const presences = state[key]\n\n      if ('metas' in presences) {\n        newState[key] = presences.metas.map((presence) => {\n          presence['presence_ref'] = presence['phx_ref']\n\n          delete presence['phx_ref']\n          delete presence['phx_ref_prev']\n\n          return presence\n        }) as Presence[]\n      } else {\n        newState[key] = presences\n      }\n\n      return newState\n    }, {} as RealtimePresenceState)\n  }\n\n  /** @internal */\n  private static cloneDeep(obj: { [key: string]: any }) {\n    return JSON.parse(JSON.stringify(obj))\n  }\n\n  /** @internal */\n  private onJoin(callback: PresenceOnJoinCallback): void {\n    this.caller.onJoin = callback\n  }\n\n  /** @internal */\n  private onLeave(callback: PresenceOnLeaveCallback): void {\n    this.caller.onLeave = callback\n  }\n\n  /** @internal */\n  private onSync(callback: () => void): void {\n    this.caller.onSync = callback\n  }\n\n  /** @internal */\n  private inPendingSyncState(): boolean {\n    return !this.joinRef || this.joinRef !== this.channel._joinRef()\n  }\n}\n"]},"metadata":{},"sourceType":"module"}