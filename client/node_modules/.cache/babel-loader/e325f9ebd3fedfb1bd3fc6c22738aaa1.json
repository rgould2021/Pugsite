{"ast":null,"code":"import _regeneratorRuntime from \"/Users/rickygould/Documents/Github/Pug-Website/Downloads/web102_unit7lab-main/client/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/rickygould/Documents/Github/Pug-Website/Downloads/web102_unit7lab-main/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"/Users/rickygould/Documents/Github/Pug-Website/Downloads/web102_unit7lab-main/client/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/rickygould/Documents/Github/Pug-Website/Downloads/web102_unit7lab-main/client/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n// @ts-ignore\nimport nodeFetch from '@supabase/node-fetch';\nimport PostgrestError from './PostgrestError';\n\nvar PostgrestBuilder = /*#__PURE__*/function () {\n  function PostgrestBuilder(builder) {\n    _classCallCheck(this, PostgrestBuilder);\n\n    this.shouldThrowOnError = false;\n    this.method = builder.method;\n    this.url = builder.url;\n    this.headers = builder.headers;\n    this.schema = builder.schema;\n    this.body = builder.body;\n    this.shouldThrowOnError = builder.shouldThrowOnError;\n    this.signal = builder.signal;\n    this.isMaybeSingle = builder.isMaybeSingle;\n\n    if (builder.fetch) {\n      this.fetch = builder.fetch;\n    } else if (typeof fetch === 'undefined') {\n      this.fetch = nodeFetch;\n    } else {\n      this.fetch = fetch;\n    }\n  }\n  /**\n   * If there's an error with the query, throwOnError will reject the promise by\n   * throwing the error instead of returning it as part of a successful response.\n   *\n   * {@link https://github.com/supabase/supabase-js/issues/92}\n   */\n\n\n  _createClass(PostgrestBuilder, [{\n    key: \"throwOnError\",\n    value: function throwOnError() {\n      this.shouldThrowOnError = true;\n      return this;\n    }\n  }, {\n    key: \"then\",\n    value: function then(onfulfilled, onrejected) {\n      var _this = this;\n\n      // https://postgrest.org/en/stable/api.html#switching-schemas\n      if (this.schema === undefined) {// skip\n      } else if (['GET', 'HEAD'].includes(this.method)) {\n        this.headers['Accept-Profile'] = this.schema;\n      } else {\n        this.headers['Content-Profile'] = this.schema;\n      }\n\n      if (this.method !== 'GET' && this.method !== 'HEAD') {\n        this.headers['Content-Type'] = 'application/json';\n      } // NOTE: Invoke w/o `this` to avoid illegal invocation error.\n      // https://github.com/supabase/postgrest-js/pull/247\n\n\n      var _fetch = this.fetch;\n\n      var res = _fetch(this.url.toString(), {\n        method: this.method,\n        headers: this.headers,\n        body: JSON.stringify(this.body),\n        signal: this.signal\n      }).then( /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(res) {\n          var _a, _b, _c, error, data, count, status, statusText, body, countHeader, contentRange, _body, postgrestResponse;\n\n          return _regeneratorRuntime().wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  error = null;\n                  data = null;\n                  count = null;\n                  status = res.status;\n                  statusText = res.statusText;\n\n                  if (!res.ok) {\n                    _context.next = 17;\n                    break;\n                  }\n\n                  if (!(_this.method !== 'HEAD')) {\n                    _context.next = 11;\n                    break;\n                  }\n\n                  _context.next = 9;\n                  return res.text();\n\n                case 9:\n                  body = _context.sent;\n\n                  if (body === '') {// Prefer: return=minimal\n                  } else if (_this.headers['Accept'] === 'text/csv') {\n                    data = body;\n                  } else if (_this.headers['Accept'] && _this.headers['Accept'].includes('application/vnd.pgrst.plan+text')) {\n                    data = body;\n                  } else {\n                    data = JSON.parse(body);\n                  }\n\n                case 11:\n                  countHeader = (_a = _this.headers['Prefer']) === null || _a === void 0 ? void 0 : _a.match(/count=(exact|planned|estimated)/);\n                  contentRange = (_b = res.headers.get('content-range')) === null || _b === void 0 ? void 0 : _b.split('/');\n\n                  if (countHeader && contentRange && contentRange.length > 1) {\n                    count = parseInt(contentRange[1]);\n                  } // Temporary partial fix for https://github.com/supabase/postgrest-js/issues/361\n                  // Issue persists e.g. for `.insert([...]).select().maybeSingle()`\n\n\n                  if (_this.isMaybeSingle && _this.method === 'GET' && Array.isArray(data)) {\n                    if (data.length > 1) {\n                      error = {\n                        // https://github.com/PostgREST/postgrest/blob/a867d79c42419af16c18c3fb019eba8df992626f/src/PostgREST/Error.hs#L553\n                        code: 'PGRST116',\n                        details: \"Results contain \".concat(data.length, \" rows, application/vnd.pgrst.object+json requires 1 row\"),\n                        hint: null,\n                        message: 'JSON object requested, multiple (or no) rows returned'\n                      };\n                      data = null;\n                      count = null;\n                      status = 406;\n                      statusText = 'Not Acceptable';\n                    } else if (data.length === 1) {\n                      data = data[0];\n                    } else {\n                      data = null;\n                    }\n                  }\n\n                  _context.next = 24;\n                  break;\n\n                case 17:\n                  _context.next = 19;\n                  return res.text();\n\n                case 19:\n                  _body = _context.sent;\n\n                  try {\n                    error = JSON.parse(_body); // Workaround for https://github.com/supabase/postgrest-js/issues/295\n\n                    if (Array.isArray(error) && res.status === 404) {\n                      data = [];\n                      error = null;\n                      status = 200;\n                      statusText = 'OK';\n                    }\n                  } catch (_d) {\n                    // Workaround for https://github.com/supabase/postgrest-js/issues/295\n                    if (res.status === 404 && _body === '') {\n                      status = 204;\n                      statusText = 'No Content';\n                    } else {\n                      error = {\n                        message: _body\n                      };\n                    }\n                  }\n\n                  if (error && _this.isMaybeSingle && ((_c = error === null || error === void 0 ? void 0 : error.details) === null || _c === void 0 ? void 0 : _c.includes('0 rows'))) {\n                    error = null;\n                    status = 200;\n                    statusText = 'OK';\n                  }\n\n                  if (!(error && _this.shouldThrowOnError)) {\n                    _context.next = 24;\n                    break;\n                  }\n\n                  throw new PostgrestError(error);\n\n                case 24:\n                  postgrestResponse = {\n                    error: error,\n                    data: data,\n                    count: count,\n                    status: status,\n                    statusText: statusText\n                  };\n                  return _context.abrupt(\"return\", postgrestResponse);\n\n                case 26:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }));\n\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }());\n\n      if (!this.shouldThrowOnError) {\n        res = res.catch(function (fetchError) {\n          var _a, _b, _c;\n\n          return {\n            error: {\n              message: \"\".concat((_a = fetchError === null || fetchError === void 0 ? void 0 : fetchError.name) !== null && _a !== void 0 ? _a : 'FetchError', \": \").concat(fetchError === null || fetchError === void 0 ? void 0 : fetchError.message),\n              details: \"\".concat((_b = fetchError === null || fetchError === void 0 ? void 0 : fetchError.stack) !== null && _b !== void 0 ? _b : ''),\n              hint: '',\n              code: \"\".concat((_c = fetchError === null || fetchError === void 0 ? void 0 : fetchError.code) !== null && _c !== void 0 ? _c : '')\n            },\n            data: null,\n            count: null,\n            status: 0,\n            statusText: ''\n          };\n        });\n      }\n\n      return res.then(onfulfilled, onrejected);\n    }\n  }]);\n\n  return PostgrestBuilder;\n}();\n\nexport { PostgrestBuilder as default };","map":{"version":3,"mappings":"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","names":["nodeFetch","PostgrestError","PostgrestBuilder","builder","method","url","headers","schema","body","shouldThrowOnError","signal","isMaybeSingle","fetch","onfulfilled","onrejected","undefined","includes","_fetch","res","toString","JSON","stringify","then","error","data","count","status","statusText","ok","text","parse","countHeader","_a","match","contentRange","get","_b","split","length","parseInt","Array","isArray","code","details","hint","message","_c","postgrestResponse","catch","fetchError","name","stack"],"sources":["/Users/rickygould/Documents/Github/Pug-Website/Downloads/web102_unit7lab-main/client/node_modules/@supabase/postgrest-js/src/PostgrestBuilder.ts"],"sourcesContent":["// @ts-ignore\nimport nodeFetch from '@supabase/node-fetch'\n\nimport type { Fetch, PostgrestSingleResponse } from './types'\nimport PostgrestError from './PostgrestError'\n\nexport default abstract class PostgrestBuilder<Result>\n  implements PromiseLike<PostgrestSingleResponse<Result>>\n{\n  protected method: 'GET' | 'HEAD' | 'POST' | 'PATCH' | 'DELETE'\n  protected url: URL\n  protected headers: Record<string, string>\n  protected schema?: string\n  protected body?: unknown\n  protected shouldThrowOnError = false\n  protected signal?: AbortSignal\n  protected fetch: Fetch\n  protected isMaybeSingle: boolean\n\n  constructor(builder: PostgrestBuilder<Result>) {\n    this.method = builder.method\n    this.url = builder.url\n    this.headers = builder.headers\n    this.schema = builder.schema\n    this.body = builder.body\n    this.shouldThrowOnError = builder.shouldThrowOnError\n    this.signal = builder.signal\n    this.isMaybeSingle = builder.isMaybeSingle\n\n    if (builder.fetch) {\n      this.fetch = builder.fetch\n    } else if (typeof fetch === 'undefined') {\n      this.fetch = nodeFetch\n    } else {\n      this.fetch = fetch\n    }\n  }\n\n  /**\n   * If there's an error with the query, throwOnError will reject the promise by\n   * throwing the error instead of returning it as part of a successful response.\n   *\n   * {@link https://github.com/supabase/supabase-js/issues/92}\n   */\n  throwOnError(): this {\n    this.shouldThrowOnError = true\n    return this\n  }\n\n  then<TResult1 = PostgrestSingleResponse<Result>, TResult2 = never>(\n    onfulfilled?:\n      | ((value: PostgrestSingleResponse<Result>) => TResult1 | PromiseLike<TResult1>)\n      | undefined\n      | null,\n    onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null\n  ): PromiseLike<TResult1 | TResult2> {\n    // https://postgrest.org/en/stable/api.html#switching-schemas\n    if (this.schema === undefined) {\n      // skip\n    } else if (['GET', 'HEAD'].includes(this.method)) {\n      this.headers['Accept-Profile'] = this.schema\n    } else {\n      this.headers['Content-Profile'] = this.schema\n    }\n    if (this.method !== 'GET' && this.method !== 'HEAD') {\n      this.headers['Content-Type'] = 'application/json'\n    }\n\n    // NOTE: Invoke w/o `this` to avoid illegal invocation error.\n    // https://github.com/supabase/postgrest-js/pull/247\n    const _fetch = this.fetch\n    let res = _fetch(this.url.toString(), {\n      method: this.method,\n      headers: this.headers,\n      body: JSON.stringify(this.body),\n      signal: this.signal,\n    }).then(async (res) => {\n      let error = null\n      let data = null\n      let count: number | null = null\n      let status = res.status\n      let statusText = res.statusText\n\n      if (res.ok) {\n        if (this.method !== 'HEAD') {\n          const body = await res.text()\n          if (body === '') {\n            // Prefer: return=minimal\n          } else if (this.headers['Accept'] === 'text/csv') {\n            data = body\n          } else if (\n            this.headers['Accept'] &&\n            this.headers['Accept'].includes('application/vnd.pgrst.plan+text')\n          ) {\n            data = body\n          } else {\n            data = JSON.parse(body)\n          }\n        }\n\n        const countHeader = this.headers['Prefer']?.match(/count=(exact|planned|estimated)/)\n        const contentRange = res.headers.get('content-range')?.split('/')\n        if (countHeader && contentRange && contentRange.length > 1) {\n          count = parseInt(contentRange[1])\n        }\n\n        // Temporary partial fix for https://github.com/supabase/postgrest-js/issues/361\n        // Issue persists e.g. for `.insert([...]).select().maybeSingle()`\n        if (this.isMaybeSingle && this.method === 'GET' && Array.isArray(data)) {\n          if (data.length > 1) {\n            error = {\n              // https://github.com/PostgREST/postgrest/blob/a867d79c42419af16c18c3fb019eba8df992626f/src/PostgREST/Error.hs#L553\n              code: 'PGRST116',\n              details: `Results contain ${data.length} rows, application/vnd.pgrst.object+json requires 1 row`,\n              hint: null,\n              message: 'JSON object requested, multiple (or no) rows returned',\n            }\n            data = null\n            count = null\n            status = 406\n            statusText = 'Not Acceptable'\n          } else if (data.length === 1) {\n            data = data[0]\n          } else {\n            data = null\n          }\n        }\n      } else {\n        const body = await res.text()\n\n        try {\n          error = JSON.parse(body)\n\n          // Workaround for https://github.com/supabase/postgrest-js/issues/295\n          if (Array.isArray(error) && res.status === 404) {\n            data = []\n            error = null\n            status = 200\n            statusText = 'OK'\n          }\n        } catch {\n          // Workaround for https://github.com/supabase/postgrest-js/issues/295\n          if (res.status === 404 && body === '') {\n            status = 204\n            statusText = 'No Content'\n          } else {\n            error = {\n              message: body,\n            }\n          }\n        }\n\n        if (error && this.isMaybeSingle && error?.details?.includes('0 rows')) {\n          error = null\n          status = 200\n          statusText = 'OK'\n        }\n\n        if (error && this.shouldThrowOnError) {\n          throw new PostgrestError(error)\n        }\n      }\n\n      const postgrestResponse = {\n        error,\n        data,\n        count,\n        status,\n        statusText,\n      }\n\n      return postgrestResponse\n    })\n    if (!this.shouldThrowOnError) {\n      res = res.catch((fetchError) => ({\n        error: {\n          message: `${fetchError?.name ?? 'FetchError'}: ${fetchError?.message}`,\n          details: `${fetchError?.stack ?? ''}`,\n          hint: '',\n          code: `${fetchError?.code ?? ''}`,\n        },\n        data: null,\n        count: null,\n        status: 0,\n        statusText: '',\n      }))\n    }\n\n    return res.then(onfulfilled, onrejected)\n  }\n}\n"]},"metadata":{},"sourceType":"module"}