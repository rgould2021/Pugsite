{"ast":null,"code":"import _classCallCheck from \"/Users/rickygould/Downloads/web102_unit7lab-main/client/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/rickygould/Downloads/web102_unit7lab-main/client/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n\n/**\n * Creates a timer that accepts a `timerCalc` function to perform calculated timeout retries, such as exponential backoff.\n *\n * @example\n *    let reconnectTimer = new Timer(() => this.connect(), function(tries){\n *      return [1000, 5000, 10000][tries - 1] || 10000\n *    })\n *    reconnectTimer.scheduleTimeout() // fires after 1000\n *    reconnectTimer.scheduleTimeout() // fires after 5000\n *    reconnectTimer.reset()\n *    reconnectTimer.scheduleTimeout() // fires after 1000\n */\nvar Timer = /*#__PURE__*/function () {\n  function Timer(callback, timerCalc) {\n    _classCallCheck(this, Timer);\n\n    this.callback = callback;\n    this.timerCalc = timerCalc;\n    this.timer = undefined;\n    this.tries = 0;\n    this.callback = callback;\n    this.timerCalc = timerCalc;\n  }\n\n  _createClass(Timer, [{\n    key: \"reset\",\n    value: function reset() {\n      this.tries = 0;\n      clearTimeout(this.timer);\n    } // Cancels any previous scheduleTimeout and schedules callback\n\n  }, {\n    key: \"scheduleTimeout\",\n    value: function scheduleTimeout() {\n      var _this = this;\n\n      clearTimeout(this.timer);\n      this.timer = setTimeout(function () {\n        _this.tries = _this.tries + 1;\n\n        _this.callback();\n      }, this.timerCalc(this.tries + 1));\n    }\n  }]);\n\n  return Timer;\n}();\n\nexport { Timer as default };","map":{"version":3,"mappings":";;;AAAA;;;;;;;;;;;;IAYqBA,K;EAInB,eAAmBC,QAAnB,EAA8CC,SAA9C,EAAiE;IAAA;;IAA9C;IAA2B;IAH9C,aAA4BC,SAA5B;IACA,aAAgB,CAAhB;IAGE,KAAKF,QAAL,GAAgBA,QAAhB;IACA,KAAKC,SAAL,GAAiBA,SAAjB;EACD;;;;WAED,iBAAK;MACH,KAAKE,KAAL,GAAa,CAAb;MACAC,YAAY,CAAC,KAAKC,KAAN,CAAZ;IACD,C,CAED;;;;WACA,2BAAe;MAAA;;MACbD,YAAY,CAAC,KAAKC,KAAN,CAAZ;MAEA,KAAKA,KAAL,GAAkBC,UAAU,CAAC,YAAK;QAChC,KAAI,CAACH,KAAL,GAAa,KAAI,CAACA,KAAL,GAAa,CAA1B;;QACA,KAAI,CAACH,QAAL;MACD,CAH2B,EAGzB,KAAKC,SAAL,CAAe,KAAKE,KAAL,GAAa,CAA5B,CAHyB,CAA5B;IAID;;;;;;SAtBkBJ,K","names":["Timer","callback","timerCalc","undefined","tries","clearTimeout","timer","setTimeout"],"sources":["/Users/rickygould/Downloads/web102_unit7lab-main/client/node_modules/@supabase/realtime-js/src/lib/timer.ts"],"sourcesContent":["/**\n * Creates a timer that accepts a `timerCalc` function to perform calculated timeout retries, such as exponential backoff.\n *\n * @example\n *    let reconnectTimer = new Timer(() => this.connect(), function(tries){\n *      return [1000, 5000, 10000][tries - 1] || 10000\n *    })\n *    reconnectTimer.scheduleTimeout() // fires after 1000\n *    reconnectTimer.scheduleTimeout() // fires after 5000\n *    reconnectTimer.reset()\n *    reconnectTimer.scheduleTimeout() // fires after 1000\n */\nexport default class Timer {\n  timer: number | undefined = undefined\n  tries: number = 0\n\n  constructor(public callback: Function, public timerCalc: Function) {\n    this.callback = callback\n    this.timerCalc = timerCalc\n  }\n\n  reset() {\n    this.tries = 0\n    clearTimeout(this.timer)\n  }\n\n  // Cancels any previous scheduleTimeout and schedules callback\n  scheduleTimeout() {\n    clearTimeout(this.timer)\n\n    this.timer = <any>setTimeout(() => {\n      this.tries = this.tries + 1\n      this.callback()\n    }, this.timerCalc(this.tries + 1))\n  }\n}\n"]},"metadata":{},"sourceType":"module"}