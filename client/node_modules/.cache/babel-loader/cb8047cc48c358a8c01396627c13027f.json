{"ast":null,"code":"import { supportsLocalStorage } from './helpers';\n/**\n * Provides safe access to the globalThis.localStorage property.\n */\n\nexport const localStorageAdapter = {\n  getItem: key => {\n    if (!supportsLocalStorage()) {\n      return null;\n    }\n\n    return globalThis.localStorage.getItem(key);\n  },\n  setItem: (key, value) => {\n    if (!supportsLocalStorage()) {\n      return;\n    }\n\n    globalThis.localStorage.setItem(key, value);\n  },\n  removeItem: key => {\n    if (!supportsLocalStorage()) {\n      return;\n    }\n\n    globalThis.localStorage.removeItem(key);\n  }\n};\n/**\n * Returns a localStorage-like object that stores the key-value pairs in\n * memory.\n */\n\nexport function memoryLocalStorageAdapter() {\n  let store = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return {\n    getItem: key => {\n      return store[key] || null;\n    },\n    setItem: (key, value) => {\n      store[key] = value;\n    },\n    removeItem: key => {\n      delete store[key];\n    }\n  };\n}","map":{"version":3,"mappings":"AAAA,SAASA,oBAAT,QAAqC,WAArC;AAGA;;;;AAGA,OAAO,MAAMC,mBAAmB,GAAqB;EACnDC,OAAO,EAAGC,GAAD,IAAQ;IACf,IAAI,CAACH,oBAAoB,EAAzB,EAA6B;MAC3B,OAAO,IAAP;IACD;;IAED,OAAOI,UAAU,CAACC,YAAX,CAAwBH,OAAxB,CAAgCC,GAAhC,CAAP;EACD,CAPkD;EAQnDG,OAAO,EAAE,CAACH,GAAD,EAAMI,KAAN,KAAe;IACtB,IAAI,CAACP,oBAAoB,EAAzB,EAA6B;MAC3B;IACD;;IAEDI,UAAU,CAACC,YAAX,CAAwBC,OAAxB,CAAgCH,GAAhC,EAAqCI,KAArC;EACD,CAdkD;EAenDC,UAAU,EAAGL,GAAD,IAAQ;IAClB,IAAI,CAACH,oBAAoB,EAAzB,EAA6B;MAC3B;IACD;;IAEDI,UAAU,CAACC,YAAX,CAAwBG,UAAxB,CAAmCL,GAAnC;EACD;AArBkD,CAA9C;AAwBP;;;;;AAIA,OAAM,SAAUM,yBAAV,GAAyE;EAAA,IAArCC,KAAqC,uEAAF,EAAE;EAC7E,OAAO;IACLR,OAAO,EAAGC,GAAD,IAAQ;MACf,OAAOO,KAAK,CAACP,GAAD,CAAL,IAAc,IAArB;IACD,CAHI;IAKLG,OAAO,EAAE,CAACH,GAAD,EAAMI,KAAN,KAAe;MACtBG,KAAK,CAACP,GAAD,CAAL,GAAaI,KAAb;IACD,CAPI;IASLC,UAAU,EAAGL,GAAD,IAAQ;MAClB,OAAOO,KAAK,CAACP,GAAD,CAAZ;IACD;EAXI,CAAP;AAaD","names":["supportsLocalStorage","localStorageAdapter","getItem","key","globalThis","localStorage","setItem","value","removeItem","memoryLocalStorageAdapter","store"],"sources":["/Users/rickygould/Documents/Github/Pug-Site/client/node_modules/@supabase/auth-js/src/lib/local-storage.ts"],"sourcesContent":["import { supportsLocalStorage } from './helpers'\nimport { SupportedStorage } from './types'\n\n/**\n * Provides safe access to the globalThis.localStorage property.\n */\nexport const localStorageAdapter: SupportedStorage = {\n  getItem: (key) => {\n    if (!supportsLocalStorage()) {\n      return null\n    }\n\n    return globalThis.localStorage.getItem(key)\n  },\n  setItem: (key, value) => {\n    if (!supportsLocalStorage()) {\n      return\n    }\n\n    globalThis.localStorage.setItem(key, value)\n  },\n  removeItem: (key) => {\n    if (!supportsLocalStorage()) {\n      return\n    }\n\n    globalThis.localStorage.removeItem(key)\n  },\n}\n\n/**\n * Returns a localStorage-like object that stores the key-value pairs in\n * memory.\n */\nexport function memoryLocalStorageAdapter(store: { [key: string]: string } = {}): SupportedStorage {\n  return {\n    getItem: (key) => {\n      return store[key] || null\n    },\n\n    setItem: (key, value) => {\n      store[key] = value\n    },\n\n    removeItem: (key) => {\n      delete store[key]\n    },\n  }\n}\n"]},"metadata":{},"sourceType":"module"}