{"ast":null,"code":"import _regeneratorRuntime from \"/Users/rickygould/Downloads/web102_unit7lab-main/client/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _classCallCheck from \"/Users/rickygould/Downloads/web102_unit7lab-main/client/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/rickygould/Downloads/web102_unit7lab-main/client/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { DEFAULT_HEADERS } from '../lib/constants';\nimport { isStorageError } from '../lib/errors';\nimport { get, post, put, remove } from '../lib/fetch';\nimport { resolveFetch } from '../lib/helpers';\n\nvar StorageBucketApi = /*#__PURE__*/function () {\n  function StorageBucketApi(url) {\n    var headers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var fetch = arguments.length > 2 ? arguments[2] : undefined;\n\n    _classCallCheck(this, StorageBucketApi);\n\n    this.url = url;\n    this.headers = Object.assign(Object.assign({}, DEFAULT_HEADERS), headers);\n    this.fetch = resolveFetch(fetch);\n  }\n  /**\n   * Retrieves the details of all Storage buckets within an existing project.\n   */\n\n\n  _createClass(StorageBucketApi, [{\n    key: \"listBuckets\",\n    value: function listBuckets() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var data;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                _context.next = 3;\n                return get(this.fetch, \"\".concat(this.url, \"/bucket\"), {\n                  headers: this.headers\n                });\n\n              case 3:\n                data = _context.sent;\n                return _context.abrupt(\"return\", {\n                  data: data,\n                  error: null\n                });\n\n              case 7:\n                _context.prev = 7;\n                _context.t0 = _context[\"catch\"](0);\n\n                if (!isStorageError(_context.t0)) {\n                  _context.next = 11;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", {\n                  data: null,\n                  error: _context.t0\n                });\n\n              case 11:\n                throw _context.t0;\n\n              case 12:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[0, 7]]);\n      }));\n    }\n    /**\n     * Retrieves the details of an existing Storage bucket.\n     *\n     * @param id The unique identifier of the bucket you would like to retrieve.\n     */\n\n  }, {\n    key: \"getBucket\",\n    value: function getBucket(id) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var data;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.prev = 0;\n                _context2.next = 3;\n                return get(this.fetch, \"\".concat(this.url, \"/bucket/\").concat(id), {\n                  headers: this.headers\n                });\n\n              case 3:\n                data = _context2.sent;\n                return _context2.abrupt(\"return\", {\n                  data: data,\n                  error: null\n                });\n\n              case 7:\n                _context2.prev = 7;\n                _context2.t0 = _context2[\"catch\"](0);\n\n                if (!isStorageError(_context2.t0)) {\n                  _context2.next = 11;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\", {\n                  data: null,\n                  error: _context2.t0\n                });\n\n              case 11:\n                throw _context2.t0;\n\n              case 12:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[0, 7]]);\n      }));\n    }\n    /**\n     * Creates a new Storage bucket\n     *\n     * @param id A unique identifier for the bucket you are creating.\n     * @param options.public The visibility of the bucket. Public buckets don't require an authorization token to download objects, but still require a valid token for all other operations. By default, buckets are private.\n     * @param options.fileSizeLimit specifies the max file size in bytes that can be uploaded to this bucket.\n     * The global file size limit takes precedence over this value.\n     * The default value is null, which doesn't set a per bucket file size limit.\n     * @param options.allowedMimeTypes specifies the allowed mime types that this bucket can accept during upload.\n     * The default value is null, which allows files with all mime types to be uploaded.\n     * Each mime type specified can be a wildcard, e.g. image/*, or a specific mime type, e.g. image/png.\n     * @returns newly created bucket id\n     */\n\n  }, {\n    key: \"createBucket\",\n    value: function createBucket(id) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n        public: false\n      };\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var data;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.prev = 0;\n                _context3.next = 3;\n                return post(this.fetch, \"\".concat(this.url, \"/bucket\"), {\n                  id: id,\n                  name: id,\n                  public: options.public,\n                  file_size_limit: options.fileSizeLimit,\n                  allowed_mime_types: options.allowedMimeTypes\n                }, {\n                  headers: this.headers\n                });\n\n              case 3:\n                data = _context3.sent;\n                return _context3.abrupt(\"return\", {\n                  data: data,\n                  error: null\n                });\n\n              case 7:\n                _context3.prev = 7;\n                _context3.t0 = _context3[\"catch\"](0);\n\n                if (!isStorageError(_context3.t0)) {\n                  _context3.next = 11;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\", {\n                  data: null,\n                  error: _context3.t0\n                });\n\n              case 11:\n                throw _context3.t0;\n\n              case 12:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[0, 7]]);\n      }));\n    }\n    /**\n     * Updates a Storage bucket\n     *\n     * @param id A unique identifier for the bucket you are updating.\n     * @param options.public The visibility of the bucket. Public buckets don't require an authorization token to download objects, but still require a valid token for all other operations.\n     * @param options.fileSizeLimit specifies the max file size in bytes that can be uploaded to this bucket.\n     * The global file size limit takes precedence over this value.\n     * The default value is null, which doesn't set a per bucket file size limit.\n     * @param options.allowedMimeTypes specifies the allowed mime types that this bucket can accept during upload.\n     * The default value is null, which allows files with all mime types to be uploaded.\n     * Each mime type specified can be a wildcard, e.g. image/*, or a specific mime type, e.g. image/png.\n     */\n\n  }, {\n    key: \"updateBucket\",\n    value: function updateBucket(id, options) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        var data;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.prev = 0;\n                _context4.next = 3;\n                return put(this.fetch, \"\".concat(this.url, \"/bucket/\").concat(id), {\n                  id: id,\n                  name: id,\n                  public: options.public,\n                  file_size_limit: options.fileSizeLimit,\n                  allowed_mime_types: options.allowedMimeTypes\n                }, {\n                  headers: this.headers\n                });\n\n              case 3:\n                data = _context4.sent;\n                return _context4.abrupt(\"return\", {\n                  data: data,\n                  error: null\n                });\n\n              case 7:\n                _context4.prev = 7;\n                _context4.t0 = _context4[\"catch\"](0);\n\n                if (!isStorageError(_context4.t0)) {\n                  _context4.next = 11;\n                  break;\n                }\n\n                return _context4.abrupt(\"return\", {\n                  data: null,\n                  error: _context4.t0\n                });\n\n              case 11:\n                throw _context4.t0;\n\n              case 12:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this, [[0, 7]]);\n      }));\n    }\n    /**\n     * Removes all objects inside a single bucket.\n     *\n     * @param id The unique identifier of the bucket you would like to empty.\n     */\n\n  }, {\n    key: \"emptyBucket\",\n    value: function emptyBucket(id) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n        var data;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.prev = 0;\n                _context5.next = 3;\n                return post(this.fetch, \"\".concat(this.url, \"/bucket/\").concat(id, \"/empty\"), {}, {\n                  headers: this.headers\n                });\n\n              case 3:\n                data = _context5.sent;\n                return _context5.abrupt(\"return\", {\n                  data: data,\n                  error: null\n                });\n\n              case 7:\n                _context5.prev = 7;\n                _context5.t0 = _context5[\"catch\"](0);\n\n                if (!isStorageError(_context5.t0)) {\n                  _context5.next = 11;\n                  break;\n                }\n\n                return _context5.abrupt(\"return\", {\n                  data: null,\n                  error: _context5.t0\n                });\n\n              case 11:\n                throw _context5.t0;\n\n              case 12:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this, [[0, 7]]);\n      }));\n    }\n    /**\n     * Deletes an existing bucket. A bucket can't be deleted with existing objects inside it.\n     * You must first `empty()` the bucket.\n     *\n     * @param id The unique identifier of the bucket you would like to delete.\n     */\n\n  }, {\n    key: \"deleteBucket\",\n    value: function deleteBucket(id) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {\n        var data;\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.prev = 0;\n                _context6.next = 3;\n                return remove(this.fetch, \"\".concat(this.url, \"/bucket/\").concat(id), {}, {\n                  headers: this.headers\n                });\n\n              case 3:\n                data = _context6.sent;\n                return _context6.abrupt(\"return\", {\n                  data: data,\n                  error: null\n                });\n\n              case 7:\n                _context6.prev = 7;\n                _context6.t0 = _context6[\"catch\"](0);\n\n                if (!isStorageError(_context6.t0)) {\n                  _context6.next = 11;\n                  break;\n                }\n\n                return _context6.abrupt(\"return\", {\n                  data: null,\n                  error: _context6.t0\n                });\n\n              case 11:\n                throw _context6.t0;\n\n              case 12:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this, [[0, 7]]);\n      }));\n    }\n  }]);\n\n  return StorageBucketApi;\n}();\n\nexport { StorageBucketApi as default };","map":{"version":3,"mappings":"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","names":["DEFAULT_HEADERS","isStorageError","get","post","put","remove","resolveFetch","StorageBucketApi","url","headers","fetch","Object","data","error","id","options","public","name","file_size_limit","fileSizeLimit","allowed_mime_types","allowedMimeTypes"],"sources":["/Users/rickygould/Downloads/web102_unit7lab-main/client/node_modules/@supabase/storage-js/src/packages/StorageBucketApi.ts"],"sourcesContent":["import { DEFAULT_HEADERS } from '../lib/constants'\nimport { isStorageError, StorageError } from '../lib/errors'\nimport { Fetch, get, post, put, remove } from '../lib/fetch'\nimport { resolveFetch } from '../lib/helpers'\nimport { Bucket } from '../lib/types'\n\nexport default class StorageBucketApi {\n  protected url: string\n  protected headers: { [key: string]: string }\n  protected fetch: Fetch\n\n  constructor(url: string, headers: { [key: string]: string } = {}, fetch?: Fetch) {\n    this.url = url\n    this.headers = { ...DEFAULT_HEADERS, ...headers }\n    this.fetch = resolveFetch(fetch)\n  }\n\n  /**\n   * Retrieves the details of all Storage buckets within an existing project.\n   */\n  async listBuckets(): Promise<\n    | {\n        data: Bucket[]\n        error: null\n      }\n    | {\n        data: null\n        error: StorageError\n      }\n  > {\n    try {\n      const data = await get(this.fetch, `${this.url}/bucket`, { headers: this.headers })\n      return { data, error: null }\n    } catch (error) {\n      if (isStorageError(error)) {\n        return { data: null, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Retrieves the details of an existing Storage bucket.\n   *\n   * @param id The unique identifier of the bucket you would like to retrieve.\n   */\n  async getBucket(\n    id: string\n  ): Promise<\n    | {\n        data: Bucket\n        error: null\n      }\n    | {\n        data: null\n        error: StorageError\n      }\n  > {\n    try {\n      const data = await get(this.fetch, `${this.url}/bucket/${id}`, { headers: this.headers })\n      return { data, error: null }\n    } catch (error) {\n      if (isStorageError(error)) {\n        return { data: null, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Creates a new Storage bucket\n   *\n   * @param id A unique identifier for the bucket you are creating.\n   * @param options.public The visibility of the bucket. Public buckets don't require an authorization token to download objects, but still require a valid token for all other operations. By default, buckets are private.\n   * @param options.fileSizeLimit specifies the max file size in bytes that can be uploaded to this bucket.\n   * The global file size limit takes precedence over this value.\n   * The default value is null, which doesn't set a per bucket file size limit.\n   * @param options.allowedMimeTypes specifies the allowed mime types that this bucket can accept during upload.\n   * The default value is null, which allows files with all mime types to be uploaded.\n   * Each mime type specified can be a wildcard, e.g. image/*, or a specific mime type, e.g. image/png.\n   * @returns newly created bucket id\n   */\n  async createBucket(\n    id: string,\n    options: {\n      public: boolean\n      fileSizeLimit?: number | string | null\n      allowedMimeTypes?: string[] | null\n    } = {\n      public: false,\n    }\n  ): Promise<\n    | {\n        data: Pick<Bucket, 'name'>\n        error: null\n      }\n    | {\n        data: null\n        error: StorageError\n      }\n  > {\n    try {\n      const data = await post(\n        this.fetch,\n        `${this.url}/bucket`,\n        {\n          id,\n          name: id,\n          public: options.public,\n          file_size_limit: options.fileSizeLimit,\n          allowed_mime_types: options.allowedMimeTypes,\n        },\n        { headers: this.headers }\n      )\n      return { data, error: null }\n    } catch (error) {\n      if (isStorageError(error)) {\n        return { data: null, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Updates a Storage bucket\n   *\n   * @param id A unique identifier for the bucket you are updating.\n   * @param options.public The visibility of the bucket. Public buckets don't require an authorization token to download objects, but still require a valid token for all other operations.\n   * @param options.fileSizeLimit specifies the max file size in bytes that can be uploaded to this bucket.\n   * The global file size limit takes precedence over this value.\n   * The default value is null, which doesn't set a per bucket file size limit.\n   * @param options.allowedMimeTypes specifies the allowed mime types that this bucket can accept during upload.\n   * The default value is null, which allows files with all mime types to be uploaded.\n   * Each mime type specified can be a wildcard, e.g. image/*, or a specific mime type, e.g. image/png.\n   */\n  async updateBucket(\n    id: string,\n    options: {\n      public: boolean\n      fileSizeLimit?: number | string | null\n      allowedMimeTypes?: string[] | null\n    }\n  ): Promise<\n    | {\n        data: { message: string }\n        error: null\n      }\n    | {\n        data: null\n        error: StorageError\n      }\n  > {\n    try {\n      const data = await put(\n        this.fetch,\n        `${this.url}/bucket/${id}`,\n        {\n          id,\n          name: id,\n          public: options.public,\n          file_size_limit: options.fileSizeLimit,\n          allowed_mime_types: options.allowedMimeTypes,\n        },\n        { headers: this.headers }\n      )\n      return { data, error: null }\n    } catch (error) {\n      if (isStorageError(error)) {\n        return { data: null, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Removes all objects inside a single bucket.\n   *\n   * @param id The unique identifier of the bucket you would like to empty.\n   */\n  async emptyBucket(\n    id: string\n  ): Promise<\n    | {\n        data: { message: string }\n        error: null\n      }\n    | {\n        data: null\n        error: StorageError\n      }\n  > {\n    try {\n      const data = await post(\n        this.fetch,\n        `${this.url}/bucket/${id}/empty`,\n        {},\n        { headers: this.headers }\n      )\n      return { data, error: null }\n    } catch (error) {\n      if (isStorageError(error)) {\n        return { data: null, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Deletes an existing bucket. A bucket can't be deleted with existing objects inside it.\n   * You must first `empty()` the bucket.\n   *\n   * @param id The unique identifier of the bucket you would like to delete.\n   */\n  async deleteBucket(\n    id: string\n  ): Promise<\n    | {\n        data: { message: string }\n        error: null\n      }\n    | {\n        data: null\n        error: StorageError\n      }\n  > {\n    try {\n      const data = await remove(\n        this.fetch,\n        `${this.url}/bucket/${id}`,\n        {},\n        { headers: this.headers }\n      )\n      return { data, error: null }\n    } catch (error) {\n      if (isStorageError(error)) {\n        return { data: null, error }\n      }\n\n      throw error\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}