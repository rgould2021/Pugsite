{"ast":null,"code":"import _regeneratorRuntime from \"/Users/rickygould/Documents/Github/Pug-Website/Downloads/web102_unit7lab-main/client/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nexport var resolveFetch = function resolveFetch(customFetch) {\n  var _fetch;\n\n  if (customFetch) {\n    _fetch = customFetch;\n  } else if (typeof fetch === 'undefined') {\n    _fetch = function _fetch() {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      return import('@supabase/node-fetch').then(function (_ref) {\n        var fetch = _ref.default;\n        return fetch.apply(void 0, args);\n      });\n    };\n  } else {\n    _fetch = fetch;\n  }\n\n  return function () {\n    return _fetch.apply(void 0, arguments);\n  };\n};\nexport var resolveResponse = function resolveResponse() {\n  return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(typeof Response === 'undefined')) {\n              _context.next = 4;\n              break;\n            }\n\n            _context.next = 3;\n            return import('@supabase/node-fetch');\n\n          case 3:\n            return _context.abrupt(\"return\", _context.sent.Response);\n\n          case 4:\n            return _context.abrupt(\"return\", Response);\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,OAAO,IAAMA,YAAY,GAAG,SAAfA,YAAe,CAACC,WAAD,EAA+B;EACzD,IAAIC,MAAJ;;EACA,IAAID,WAAJ,EAAiB;IACfC,MAAM,GAAGD,WAAT;EACD,CAFD,MAEO,IAAI,OAAOE,KAAP,KAAiB,WAArB,EAAkC;IACvCD,MAAM,GAAG;MAAA,kCAAIE,IAAJ;QAAIA,IAAJ;MAAA;;MAAA,OACP,OAAO,sBAAP,EAAsCC,IAAtC,CAA2C;QAAA,IAAYF,KAAZ,QAAGG,OAAH;QAAA,OAAwBH,KAAK,MAAL,SAASC,IAAT,CAAxB;MAAA,CAA3C,CADO;IAAA,CAAT;EAED,CAHM,MAGA;IACLF,MAAM,GAAGC,KAAT;EACD;;EACD,OAAO;IAAA,OAAaD,MAAM,MAAN,mBAAb;EAAA,CAAP;AACD,CAXM;AAaP,OAAO,IAAMK,eAAe,GAAG,SAAlBA,eAAkB;EAAA,OAAqCC;IAAA;MAAA;QAAA;UAAA;YAAA,MAC9D,OAAOC,QAAP,KAAoB,WAD0C;cAAA;cAAA;YAAA;;YAAA;YAGxD,OAAM,OAAO,sBAAP,CAAN;;UAHwD;YAAA,+CAGXA,QAHW;;UAAA;YAAA,iCAM3DA,QAN2D;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,GAArC;AAAA,CAAxB","names":["resolveFetch","customFetch","_fetch","fetch","args","then","default","resolveResponse","__awaiter","Response"],"sources":["/Users/rickygould/Documents/Github/Pug-Website/Downloads/web102_unit7lab-main/client/node_modules/@supabase/storage-js/src/lib/helpers.ts"],"sourcesContent":["type Fetch = typeof fetch\n\nexport const resolveFetch = (customFetch?: Fetch): Fetch => {\n  let _fetch: Fetch\n  if (customFetch) {\n    _fetch = customFetch\n  } else if (typeof fetch === 'undefined') {\n    _fetch = (...args) =>\n      import('@supabase/node-fetch' as any).then(({ default: fetch }) => fetch(...args))\n  } else {\n    _fetch = fetch\n  }\n  return (...args) => _fetch(...args)\n}\n\nexport const resolveResponse = async (): Promise<typeof Response> => {\n  if (typeof Response === 'undefined') {\n    // @ts-ignore\n    return (await import('@supabase/node-fetch' as any)).Response\n  }\n\n  return Response\n}\n"]},"metadata":{},"sourceType":"module"}