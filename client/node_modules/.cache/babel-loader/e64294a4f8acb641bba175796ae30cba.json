{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { isStorageError, StorageError } from '../lib/errors';\nimport { get, post, remove } from '../lib/fetch';\nimport { resolveFetch } from '../lib/helpers';\nconst DEFAULT_SEARCH_OPTIONS = {\n  limit: 100,\n  offset: 0,\n  sortBy: {\n    column: 'name',\n    order: 'asc'\n  }\n};\nconst DEFAULT_FILE_OPTIONS = {\n  cacheControl: '3600',\n  contentType: 'text/plain;charset=UTF-8',\n  upsert: false\n};\nexport default class StorageFileApi {\n  constructor(url) {\n    let headers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let bucketId = arguments.length > 2 ? arguments[2] : undefined;\n    let fetch = arguments.length > 3 ? arguments[3] : undefined;\n    this.url = url;\n    this.headers = headers;\n    this.bucketId = bucketId;\n    this.fetch = resolveFetch(fetch);\n  }\n  /**\n   * Uploads a file to an existing bucket or replaces an existing file at the specified path with a new one.\n   *\n   * @param method HTTP method.\n   * @param path The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\n   * @param fileBody The body of the file to be stored in the bucket.\n   */\n\n\n  uploadOrUpdate(method, path, fileBody, fileOptions) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        let body;\n        const options = Object.assign(Object.assign({}, DEFAULT_FILE_OPTIONS), fileOptions);\n        const headers = Object.assign(Object.assign({}, this.headers), method === 'POST' && {\n          'x-upsert': String(options.upsert)\n        });\n\n        if (typeof Blob !== 'undefined' && fileBody instanceof Blob) {\n          body = new FormData();\n          body.append('cacheControl', options.cacheControl);\n          body.append('', fileBody);\n        } else if (typeof FormData !== 'undefined' && fileBody instanceof FormData) {\n          body = fileBody;\n          body.append('cacheControl', options.cacheControl);\n        } else {\n          body = fileBody;\n          headers['cache-control'] = `max-age=${options.cacheControl}`;\n          headers['content-type'] = options.contentType;\n        }\n\n        const cleanPath = this._removeEmptyFolders(path);\n\n        const _path = this._getFinalPath(cleanPath);\n\n        const res = yield this.fetch(`${this.url}/object/${_path}`, Object.assign({\n          method,\n          body: body,\n          headers\n        }, (options === null || options === void 0 ? void 0 : options.duplex) ? {\n          duplex: options.duplex\n        } : {}));\n        const data = yield res.json();\n\n        if (res.ok) {\n          return {\n            data: {\n              path: cleanPath,\n              id: data.Id,\n              fullPath: data.Key\n            },\n            error: null\n          };\n        } else {\n          const error = data;\n          return {\n            data: null,\n            error\n          };\n        }\n      } catch (error) {\n        if (isStorageError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n\n        throw error;\n      }\n    });\n  }\n  /**\n   * Uploads a file to an existing bucket.\n   *\n   * @param path The file path, including the file name. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\n   * @param fileBody The body of the file to be stored in the bucket.\n   */\n\n\n  upload(path, fileBody, fileOptions) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.uploadOrUpdate('POST', path, fileBody, fileOptions);\n    });\n  }\n  /**\n   * Upload a file with a token generated from `createSignedUploadUrl`.\n   * @param path The file path, including the file name. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\n   * @param token The token generated from `createSignedUploadUrl`\n   * @param fileBody The body of the file to be stored in the bucket.\n   */\n\n\n  uploadToSignedUrl(path, token, fileBody, fileOptions) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const cleanPath = this._removeEmptyFolders(path);\n\n      const _path = this._getFinalPath(cleanPath);\n\n      const url = new URL(this.url + `/object/upload/sign/${_path}`);\n      url.searchParams.set('token', token);\n\n      try {\n        let body;\n        const options = Object.assign({\n          upsert: DEFAULT_FILE_OPTIONS.upsert\n        }, fileOptions);\n        const headers = Object.assign(Object.assign({}, this.headers), {\n          'x-upsert': String(options.upsert)\n        });\n\n        if (typeof Blob !== 'undefined' && fileBody instanceof Blob) {\n          body = new FormData();\n          body.append('cacheControl', options.cacheControl);\n          body.append('', fileBody);\n        } else if (typeof FormData !== 'undefined' && fileBody instanceof FormData) {\n          body = fileBody;\n          body.append('cacheControl', options.cacheControl);\n        } else {\n          body = fileBody;\n          headers['cache-control'] = `max-age=${options.cacheControl}`;\n          headers['content-type'] = options.contentType;\n        }\n\n        const res = yield this.fetch(url.toString(), {\n          method: 'PUT',\n          body: body,\n          headers\n        });\n        const data = yield res.json();\n\n        if (res.ok) {\n          return {\n            data: {\n              path: cleanPath,\n              fullPath: data.Key\n            },\n            error: null\n          };\n        } else {\n          const error = data;\n          return {\n            data: null,\n            error\n          };\n        }\n      } catch (error) {\n        if (isStorageError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n\n        throw error;\n      }\n    });\n  }\n  /**\n   * Creates a signed upload URL.\n   * Signed upload URLs can be used to upload files to the bucket without further authentication.\n   * They are valid for 2 hours.\n   * @param path The file path, including the current file name. For example `folder/image.png`.\n   */\n\n\n  createSignedUploadUrl(path) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        let _path = this._getFinalPath(path);\n\n        const data = yield post(this.fetch, `${this.url}/object/upload/sign/${_path}`, {}, {\n          headers: this.headers\n        });\n        const url = new URL(this.url + data.url);\n        const token = url.searchParams.get('token');\n\n        if (!token) {\n          throw new StorageError('No token returned by API');\n        }\n\n        return {\n          data: {\n            signedUrl: url.toString(),\n            path,\n            token\n          },\n          error: null\n        };\n      } catch (error) {\n        if (isStorageError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n\n        throw error;\n      }\n    });\n  }\n  /**\n   * Replaces an existing file at the specified path with a new one.\n   *\n   * @param path The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to update.\n   * @param fileBody The body of the file to be stored in the bucket.\n   */\n\n\n  update(path, fileBody, fileOptions) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.uploadOrUpdate('PUT', path, fileBody, fileOptions);\n    });\n  }\n  /**\n   * Moves an existing file to a new path in the same bucket.\n   *\n   * @param fromPath The original file path, including the current file name. For example `folder/image.png`.\n   * @param toPath The new file path, including the new file name. For example `folder/image-new.png`.\n   */\n\n\n  move(fromPath, toPath) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const data = yield post(this.fetch, `${this.url}/object/move`, {\n          bucketId: this.bucketId,\n          sourceKey: fromPath,\n          destinationKey: toPath\n        }, {\n          headers: this.headers\n        });\n        return {\n          data,\n          error: null\n        };\n      } catch (error) {\n        if (isStorageError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n\n        throw error;\n      }\n    });\n  }\n  /**\n   * Copies an existing file to a new path in the same bucket.\n   *\n   * @param fromPath The original file path, including the current file name. For example `folder/image.png`.\n   * @param toPath The new file path, including the new file name. For example `folder/image-copy.png`.\n   */\n\n\n  copy(fromPath, toPath) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const data = yield post(this.fetch, `${this.url}/object/copy`, {\n          bucketId: this.bucketId,\n          sourceKey: fromPath,\n          destinationKey: toPath\n        }, {\n          headers: this.headers\n        });\n        return {\n          data: {\n            path: data.Key\n          },\n          error: null\n        };\n      } catch (error) {\n        if (isStorageError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n\n        throw error;\n      }\n    });\n  }\n  /**\n   * Creates a signed URL. Use a signed URL to share a file for a fixed amount of time.\n   *\n   * @param path The file path, including the current file name. For example `folder/image.png`.\n   * @param expiresIn The number of seconds until the signed URL expires. For example, `60` for a URL which is valid for one minute.\n   * @param options.download triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.\n   * @param options.transform Transform the asset before serving it to the client.\n   */\n\n\n  createSignedUrl(path, expiresIn, options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        let _path = this._getFinalPath(path);\n\n        let data = yield post(this.fetch, `${this.url}/object/sign/${_path}`, Object.assign({\n          expiresIn\n        }, (options === null || options === void 0 ? void 0 : options.transform) ? {\n          transform: options.transform\n        } : {}), {\n          headers: this.headers\n        });\n        const downloadQueryParam = (options === null || options === void 0 ? void 0 : options.download) ? `&download=${options.download === true ? '' : options.download}` : '';\n        const signedUrl = encodeURI(`${this.url}${data.signedURL}${downloadQueryParam}`);\n        data = {\n          signedUrl\n        };\n        return {\n          data,\n          error: null\n        };\n      } catch (error) {\n        if (isStorageError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n\n        throw error;\n      }\n    });\n  }\n  /**\n   * Creates multiple signed URLs. Use a signed URL to share a file for a fixed amount of time.\n   *\n   * @param paths The file paths to be downloaded, including the current file names. For example `['folder/image.png', 'folder2/image2.png']`.\n   * @param expiresIn The number of seconds until the signed URLs expire. For example, `60` for URLs which are valid for one minute.\n   * @param options.download triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.\n   */\n\n\n  createSignedUrls(paths, expiresIn, options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const data = yield post(this.fetch, `${this.url}/object/sign/${this.bucketId}`, {\n          expiresIn,\n          paths\n        }, {\n          headers: this.headers\n        });\n        const downloadQueryParam = (options === null || options === void 0 ? void 0 : options.download) ? `&download=${options.download === true ? '' : options.download}` : '';\n        return {\n          data: data.map(datum => Object.assign(Object.assign({}, datum), {\n            signedUrl: datum.signedURL ? encodeURI(`${this.url}${datum.signedURL}${downloadQueryParam}`) : null\n          })),\n          error: null\n        };\n      } catch (error) {\n        if (isStorageError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n\n        throw error;\n      }\n    });\n  }\n  /**\n   * Downloads a file from a private bucket. For public buckets, make a request to the URL returned from `getPublicUrl` instead.\n   *\n   * @param path The full path and file name of the file to be downloaded. For example `folder/image.png`.\n   * @param options.transform Transform the asset before serving it to the client.\n   */\n\n\n  download(path, options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const wantsTransformation = typeof (options === null || options === void 0 ? void 0 : options.transform) !== 'undefined';\n      const renderPath = wantsTransformation ? 'render/image/authenticated' : 'object';\n      const transformationQuery = this.transformOptsToQueryString((options === null || options === void 0 ? void 0 : options.transform) || {});\n      const queryString = transformationQuery ? `?${transformationQuery}` : '';\n\n      try {\n        const _path = this._getFinalPath(path);\n\n        const res = yield get(this.fetch, `${this.url}/${renderPath}/${_path}${queryString}`, {\n          headers: this.headers,\n          noResolveJson: true\n        });\n        const data = yield res.blob();\n        return {\n          data,\n          error: null\n        };\n      } catch (error) {\n        if (isStorageError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n\n        throw error;\n      }\n    });\n  }\n  /**\n   * A simple convenience function to get the URL for an asset in a public bucket. If you do not want to use this function, you can construct the public URL by concatenating the bucket URL with the path to the asset.\n   * This function does not verify if the bucket is public. If a public URL is created for a bucket which is not public, you will not be able to download the asset.\n   *\n   * @param path The path and name of the file to generate the public URL for. For example `folder/image.png`.\n   * @param options.download Triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.\n   * @param options.transform Transform the asset before serving it to the client.\n   */\n\n\n  getPublicUrl(path, options) {\n    const _path = this._getFinalPath(path);\n\n    const _queryString = [];\n    const downloadQueryParam = (options === null || options === void 0 ? void 0 : options.download) ? `download=${options.download === true ? '' : options.download}` : '';\n\n    if (downloadQueryParam !== '') {\n      _queryString.push(downloadQueryParam);\n    }\n\n    const wantsTransformation = typeof (options === null || options === void 0 ? void 0 : options.transform) !== 'undefined';\n    const renderPath = wantsTransformation ? 'render/image' : 'object';\n    const transformationQuery = this.transformOptsToQueryString((options === null || options === void 0 ? void 0 : options.transform) || {});\n\n    if (transformationQuery !== '') {\n      _queryString.push(transformationQuery);\n    }\n\n    let queryString = _queryString.join('&');\n\n    if (queryString !== '') {\n      queryString = `?${queryString}`;\n    }\n\n    return {\n      data: {\n        publicUrl: encodeURI(`${this.url}/${renderPath}/public/${_path}${queryString}`)\n      }\n    };\n  }\n  /**\n   * Deletes files within the same bucket\n   *\n   * @param paths An array of files to delete, including the path and file name. For example [`'folder/image.png'`].\n   */\n\n\n  remove(paths) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const data = yield remove(this.fetch, `${this.url}/object/${this.bucketId}`, {\n          prefixes: paths\n        }, {\n          headers: this.headers\n        });\n        return {\n          data,\n          error: null\n        };\n      } catch (error) {\n        if (isStorageError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n\n        throw error;\n      }\n    });\n  }\n  /**\n   * Get file metadata\n   * @param id the file id to retrieve metadata\n   */\n  // async getMetadata(\n  //   id: string\n  // ): Promise<\n  //   | {\n  //       data: Metadata\n  //       error: null\n  //     }\n  //   | {\n  //       data: null\n  //       error: StorageError\n  //     }\n  // > {\n  //   try {\n  //     const data = await get(this.fetch, `${this.url}/metadata/${id}`, { headers: this.headers })\n  //     return { data, error: null }\n  //   } catch (error) {\n  //     if (isStorageError(error)) {\n  //       return { data: null, error }\n  //     }\n  //     throw error\n  //   }\n  // }\n\n  /**\n   * Update file metadata\n   * @param id the file id to update metadata\n   * @param meta the new file metadata\n   */\n  // async updateMetadata(\n  //   id: string,\n  //   meta: Metadata\n  // ): Promise<\n  //   | {\n  //       data: Metadata\n  //       error: null\n  //     }\n  //   | {\n  //       data: null\n  //       error: StorageError\n  //     }\n  // > {\n  //   try {\n  //     const data = await post(\n  //       this.fetch,\n  //       `${this.url}/metadata/${id}`,\n  //       { ...meta },\n  //       { headers: this.headers }\n  //     )\n  //     return { data, error: null }\n  //   } catch (error) {\n  //     if (isStorageError(error)) {\n  //       return { data: null, error }\n  //     }\n  //     throw error\n  //   }\n  // }\n\n  /**\n   * Lists all the files within a bucket.\n   * @param path The folder path.\n   */\n\n\n  list(path, options, parameters) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const body = Object.assign(Object.assign(Object.assign({}, DEFAULT_SEARCH_OPTIONS), options), {\n          prefix: path || ''\n        });\n        const data = yield post(this.fetch, `${this.url}/object/list/${this.bucketId}`, body, {\n          headers: this.headers\n        }, parameters);\n        return {\n          data,\n          error: null\n        };\n      } catch (error) {\n        if (isStorageError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n\n        throw error;\n      }\n    });\n  }\n\n  _getFinalPath(path) {\n    return `${this.bucketId}/${path}`;\n  }\n\n  _removeEmptyFolders(path) {\n    return path.replace(/^\\/|\\/$/g, '').replace(/\\/+/g, '/');\n  }\n\n  transformOptsToQueryString(transform) {\n    const params = [];\n\n    if (transform.width) {\n      params.push(`width=${transform.width}`);\n    }\n\n    if (transform.height) {\n      params.push(`height=${transform.height}`);\n    }\n\n    if (transform.resize) {\n      params.push(`resize=${transform.resize}`);\n    }\n\n    if (transform.format) {\n      params.push(`format=${transform.format}`);\n    }\n\n    if (transform.quality) {\n      params.push(`quality=${transform.quality}`);\n    }\n\n    return params.join('&');\n  }\n\n}","map":{"version":3,"mappings":"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","names":["isStorageError","StorageError","get","post","remove","resolveFetch","DEFAULT_SEARCH_OPTIONS","limit","offset","sortBy","column","order","DEFAULT_FILE_OPTIONS","cacheControl","contentType","upsert","StorageFileApi","constructor","url","headers","bucketId","fetch","uploadOrUpdate","method","path","fileBody","fileOptions","body","options","String","Blob","FormData","append","cleanPath","_removeEmptyFolders","_path","_getFinalPath","res","Object","duplex","data","json","ok","id","Id","fullPath","Key","error","upload","uploadToSignedUrl","token","URL","searchParams","set","toString","createSignedUploadUrl","signedUrl","update","move","fromPath","toPath","sourceKey","destinationKey","copy","createSignedUrl","expiresIn","transform","downloadQueryParam","download","encodeURI","signedURL","createSignedUrls","paths","map","datum","wantsTransformation","renderPath","transformationQuery","transformOptsToQueryString","queryString","noResolveJson","blob","getPublicUrl","_queryString","push","join","publicUrl","prefixes","list","parameters","prefix","replace","params","width","height","resize","format","quality"],"sources":["/Users/rickygould/Documents/Github/Pug-Site/client/node_modules/@supabase/storage-js/src/packages/StorageFileApi.ts"],"sourcesContent":["import { isStorageError, StorageError } from '../lib/errors'\nimport { Fetch, get, post, remove } from '../lib/fetch'\nimport { resolveFetch } from '../lib/helpers'\nimport {\n  FileObject,\n  FileOptions,\n  SearchOptions,\n  FetchParameters,\n  TransformOptions,\n} from '../lib/types'\n\nconst DEFAULT_SEARCH_OPTIONS = {\n  limit: 100,\n  offset: 0,\n  sortBy: {\n    column: 'name',\n    order: 'asc',\n  },\n}\n\nconst DEFAULT_FILE_OPTIONS: FileOptions = {\n  cacheControl: '3600',\n  contentType: 'text/plain;charset=UTF-8',\n  upsert: false,\n}\n\ntype FileBody =\n  | ArrayBuffer\n  | ArrayBufferView\n  | Blob\n  | Buffer\n  | File\n  | FormData\n  | NodeJS.ReadableStream\n  | ReadableStream<Uint8Array>\n  | URLSearchParams\n  | string\n\nexport default class StorageFileApi {\n  protected url: string\n  protected headers: { [key: string]: string }\n  protected bucketId?: string\n  protected fetch: Fetch\n\n  constructor(\n    url: string,\n    headers: { [key: string]: string } = {},\n    bucketId?: string,\n    fetch?: Fetch\n  ) {\n    this.url = url\n    this.headers = headers\n    this.bucketId = bucketId\n    this.fetch = resolveFetch(fetch)\n  }\n\n  /**\n   * Uploads a file to an existing bucket or replaces an existing file at the specified path with a new one.\n   *\n   * @param method HTTP method.\n   * @param path The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\n   * @param fileBody The body of the file to be stored in the bucket.\n   */\n  private async uploadOrUpdate(\n    method: 'POST' | 'PUT',\n    path: string,\n    fileBody: FileBody,\n    fileOptions?: FileOptions\n  ): Promise<\n    | {\n        data: { id: string; path: string; fullPath: string }\n        error: null\n      }\n    | {\n        data: null\n        error: StorageError\n      }\n  > {\n    try {\n      let body\n      const options = { ...DEFAULT_FILE_OPTIONS, ...fileOptions }\n      const headers: Record<string, string> = {\n        ...this.headers,\n        ...(method === 'POST' && { 'x-upsert': String(options.upsert as boolean) }),\n      }\n\n      if (typeof Blob !== 'undefined' && fileBody instanceof Blob) {\n        body = new FormData()\n        body.append('cacheControl', options.cacheControl as string)\n        body.append('', fileBody)\n      } else if (typeof FormData !== 'undefined' && fileBody instanceof FormData) {\n        body = fileBody\n        body.append('cacheControl', options.cacheControl as string)\n      } else {\n        body = fileBody\n        headers['cache-control'] = `max-age=${options.cacheControl}`\n        headers['content-type'] = options.contentType as string\n      }\n\n      const cleanPath = this._removeEmptyFolders(path)\n      const _path = this._getFinalPath(cleanPath)\n      const res = await this.fetch(`${this.url}/object/${_path}`, {\n        method,\n        body: body as BodyInit,\n        headers,\n        ...(options?.duplex ? { duplex: options.duplex } : {}),\n      })\n\n      const data = await res.json()\n\n      if (res.ok) {\n        return {\n          data: { path: cleanPath, id: data.Id, fullPath: data.Key },\n          error: null,\n        }\n      } else {\n        const error = data\n        return { data: null, error }\n      }\n    } catch (error) {\n      if (isStorageError(error)) {\n        return { data: null, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Uploads a file to an existing bucket.\n   *\n   * @param path The file path, including the file name. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\n   * @param fileBody The body of the file to be stored in the bucket.\n   */\n  async upload(\n    path: string,\n    fileBody: FileBody,\n    fileOptions?: FileOptions\n  ): Promise<\n    | {\n        data: { path: string }\n        error: null\n      }\n    | {\n        data: null\n        error: StorageError\n      }\n  > {\n    return this.uploadOrUpdate('POST', path, fileBody, fileOptions)\n  }\n\n  /**\n   * Upload a file with a token generated from `createSignedUploadUrl`.\n   * @param path The file path, including the file name. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\n   * @param token The token generated from `createSignedUploadUrl`\n   * @param fileBody The body of the file to be stored in the bucket.\n   */\n  async uploadToSignedUrl(\n    path: string,\n    token: string,\n    fileBody: FileBody,\n    fileOptions?: FileOptions\n  ) {\n    const cleanPath = this._removeEmptyFolders(path)\n    const _path = this._getFinalPath(cleanPath)\n\n    const url = new URL(this.url + `/object/upload/sign/${_path}`)\n    url.searchParams.set('token', token)\n\n    try {\n      let body\n      const options = { upsert: DEFAULT_FILE_OPTIONS.upsert, ...fileOptions }\n      const headers: Record<string, string> = {\n        ...this.headers,\n        ...{ 'x-upsert': String(options.upsert as boolean) },\n      }\n\n      if (typeof Blob !== 'undefined' && fileBody instanceof Blob) {\n        body = new FormData()\n        body.append('cacheControl', options.cacheControl as string)\n        body.append('', fileBody)\n      } else if (typeof FormData !== 'undefined' && fileBody instanceof FormData) {\n        body = fileBody\n        body.append('cacheControl', options.cacheControl as string)\n      } else {\n        body = fileBody\n        headers['cache-control'] = `max-age=${options.cacheControl}`\n        headers['content-type'] = options.contentType as string\n      }\n\n      const res = await this.fetch(url.toString(), {\n        method: 'PUT',\n        body: body as BodyInit,\n        headers,\n      })\n\n      const data = await res.json()\n\n      if (res.ok) {\n        return {\n          data: { path: cleanPath, fullPath: data.Key },\n          error: null,\n        }\n      } else {\n        const error = data\n        return { data: null, error }\n      }\n    } catch (error) {\n      if (isStorageError(error)) {\n        return { data: null, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Creates a signed upload URL.\n   * Signed upload URLs can be used to upload files to the bucket without further authentication.\n   * They are valid for 2 hours.\n   * @param path The file path, including the current file name. For example `folder/image.png`.\n   */\n  async createSignedUploadUrl(\n    path: string\n  ): Promise<\n    | {\n        data: { signedUrl: string; token: string; path: string }\n        error: null\n      }\n    | {\n        data: null\n        error: StorageError\n      }\n  > {\n    try {\n      let _path = this._getFinalPath(path)\n\n      const data = await post(\n        this.fetch,\n        `${this.url}/object/upload/sign/${_path}`,\n        {},\n        { headers: this.headers }\n      )\n\n      const url = new URL(this.url + data.url)\n\n      const token = url.searchParams.get('token')\n\n      if (!token) {\n        throw new StorageError('No token returned by API')\n      }\n\n      return { data: { signedUrl: url.toString(), path, token }, error: null }\n    } catch (error) {\n      if (isStorageError(error)) {\n        return { data: null, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Replaces an existing file at the specified path with a new one.\n   *\n   * @param path The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to update.\n   * @param fileBody The body of the file to be stored in the bucket.\n   */\n  async update(\n    path: string,\n    fileBody:\n      | ArrayBuffer\n      | ArrayBufferView\n      | Blob\n      | Buffer\n      | File\n      | FormData\n      | NodeJS.ReadableStream\n      | ReadableStream<Uint8Array>\n      | URLSearchParams\n      | string,\n    fileOptions?: FileOptions\n  ): Promise<\n    | {\n        data: { path: string }\n        error: null\n      }\n    | {\n        data: null\n        error: StorageError\n      }\n  > {\n    return this.uploadOrUpdate('PUT', path, fileBody, fileOptions)\n  }\n\n  /**\n   * Moves an existing file to a new path in the same bucket.\n   *\n   * @param fromPath The original file path, including the current file name. For example `folder/image.png`.\n   * @param toPath The new file path, including the new file name. For example `folder/image-new.png`.\n   */\n  async move(\n    fromPath: string,\n    toPath: string\n  ): Promise<\n    | {\n        data: { message: string }\n        error: null\n      }\n    | {\n        data: null\n        error: StorageError\n      }\n  > {\n    try {\n      const data = await post(\n        this.fetch,\n        `${this.url}/object/move`,\n        { bucketId: this.bucketId, sourceKey: fromPath, destinationKey: toPath },\n        { headers: this.headers }\n      )\n      return { data, error: null }\n    } catch (error) {\n      if (isStorageError(error)) {\n        return { data: null, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Copies an existing file to a new path in the same bucket.\n   *\n   * @param fromPath The original file path, including the current file name. For example `folder/image.png`.\n   * @param toPath The new file path, including the new file name. For example `folder/image-copy.png`.\n   */\n  async copy(\n    fromPath: string,\n    toPath: string\n  ): Promise<\n    | {\n        data: { path: string }\n        error: null\n      }\n    | {\n        data: null\n        error: StorageError\n      }\n  > {\n    try {\n      const data = await post(\n        this.fetch,\n        `${this.url}/object/copy`,\n        { bucketId: this.bucketId, sourceKey: fromPath, destinationKey: toPath },\n        { headers: this.headers }\n      )\n      return { data: { path: data.Key }, error: null }\n    } catch (error) {\n      if (isStorageError(error)) {\n        return { data: null, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Creates a signed URL. Use a signed URL to share a file for a fixed amount of time.\n   *\n   * @param path The file path, including the current file name. For example `folder/image.png`.\n   * @param expiresIn The number of seconds until the signed URL expires. For example, `60` for a URL which is valid for one minute.\n   * @param options.download triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.\n   * @param options.transform Transform the asset before serving it to the client.\n   */\n  async createSignedUrl(\n    path: string,\n    expiresIn: number,\n    options?: { download?: string | boolean; transform?: TransformOptions }\n  ): Promise<\n    | {\n        data: { signedUrl: string }\n        error: null\n      }\n    | {\n        data: null\n        error: StorageError\n      }\n  > {\n    try {\n      let _path = this._getFinalPath(path)\n\n      let data = await post(\n        this.fetch,\n        `${this.url}/object/sign/${_path}`,\n        { expiresIn, ...(options?.transform ? { transform: options.transform } : {}) },\n        { headers: this.headers }\n      )\n      const downloadQueryParam = options?.download\n        ? `&download=${options.download === true ? '' : options.download}`\n        : ''\n      const signedUrl = encodeURI(`${this.url}${data.signedURL}${downloadQueryParam}`)\n      data = { signedUrl }\n      return { data, error: null }\n    } catch (error) {\n      if (isStorageError(error)) {\n        return { data: null, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Creates multiple signed URLs. Use a signed URL to share a file for a fixed amount of time.\n   *\n   * @param paths The file paths to be downloaded, including the current file names. For example `['folder/image.png', 'folder2/image2.png']`.\n   * @param expiresIn The number of seconds until the signed URLs expire. For example, `60` for URLs which are valid for one minute.\n   * @param options.download triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.\n   */\n  async createSignedUrls(\n    paths: string[],\n    expiresIn: number,\n    options?: { download: string | boolean }\n  ): Promise<\n    | {\n        data: { error: string | null; path: string | null; signedUrl: string }[]\n        error: null\n      }\n    | {\n        data: null\n        error: StorageError\n      }\n  > {\n    try {\n      const data = await post(\n        this.fetch,\n        `${this.url}/object/sign/${this.bucketId}`,\n        { expiresIn, paths },\n        { headers: this.headers }\n      )\n\n      const downloadQueryParam = options?.download\n        ? `&download=${options.download === true ? '' : options.download}`\n        : ''\n      return {\n        data: data.map((datum: { signedURL: string }) => ({\n          ...datum,\n          signedUrl: datum.signedURL\n            ? encodeURI(`${this.url}${datum.signedURL}${downloadQueryParam}`)\n            : null,\n        })),\n        error: null,\n      }\n    } catch (error) {\n      if (isStorageError(error)) {\n        return { data: null, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Downloads a file from a private bucket. For public buckets, make a request to the URL returned from `getPublicUrl` instead.\n   *\n   * @param path The full path and file name of the file to be downloaded. For example `folder/image.png`.\n   * @param options.transform Transform the asset before serving it to the client.\n   */\n  async download(\n    path: string,\n    options?: { transform?: TransformOptions }\n  ): Promise<\n    | {\n        data: Blob\n        error: null\n      }\n    | {\n        data: null\n        error: StorageError\n      }\n  > {\n    const wantsTransformation = typeof options?.transform !== 'undefined'\n    const renderPath = wantsTransformation ? 'render/image/authenticated' : 'object'\n    const transformationQuery = this.transformOptsToQueryString(options?.transform || {})\n    const queryString = transformationQuery ? `?${transformationQuery}` : ''\n\n    try {\n      const _path = this._getFinalPath(path)\n      const res = await get(this.fetch, `${this.url}/${renderPath}/${_path}${queryString}`, {\n        headers: this.headers,\n        noResolveJson: true,\n      })\n      const data = await res.blob()\n      return { data, error: null }\n    } catch (error) {\n      if (isStorageError(error)) {\n        return { data: null, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * A simple convenience function to get the URL for an asset in a public bucket. If you do not want to use this function, you can construct the public URL by concatenating the bucket URL with the path to the asset.\n   * This function does not verify if the bucket is public. If a public URL is created for a bucket which is not public, you will not be able to download the asset.\n   *\n   * @param path The path and name of the file to generate the public URL for. For example `folder/image.png`.\n   * @param options.download Triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.\n   * @param options.transform Transform the asset before serving it to the client.\n   */\n  getPublicUrl(\n    path: string,\n    options?: { download?: string | boolean; transform?: TransformOptions }\n  ): { data: { publicUrl: string } } {\n    const _path = this._getFinalPath(path)\n    const _queryString = []\n\n    const downloadQueryParam = options?.download\n      ? `download=${options.download === true ? '' : options.download}`\n      : ''\n\n    if (downloadQueryParam !== '') {\n      _queryString.push(downloadQueryParam)\n    }\n\n    const wantsTransformation = typeof options?.transform !== 'undefined'\n    const renderPath = wantsTransformation ? 'render/image' : 'object'\n    const transformationQuery = this.transformOptsToQueryString(options?.transform || {})\n\n    if (transformationQuery !== '') {\n      _queryString.push(transformationQuery)\n    }\n\n    let queryString = _queryString.join('&')\n    if (queryString !== '') {\n      queryString = `?${queryString}`\n    }\n\n    return {\n      data: { publicUrl: encodeURI(`${this.url}/${renderPath}/public/${_path}${queryString}`) },\n    }\n  }\n\n  /**\n   * Deletes files within the same bucket\n   *\n   * @param paths An array of files to delete, including the path and file name. For example [`'folder/image.png'`].\n   */\n  async remove(\n    paths: string[]\n  ): Promise<\n    | {\n        data: FileObject[]\n        error: null\n      }\n    | {\n        data: null\n        error: StorageError\n      }\n  > {\n    try {\n      const data = await remove(\n        this.fetch,\n        `${this.url}/object/${this.bucketId}`,\n        { prefixes: paths },\n        { headers: this.headers }\n      )\n      return { data, error: null }\n    } catch (error) {\n      if (isStorageError(error)) {\n        return { data: null, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Get file metadata\n   * @param id the file id to retrieve metadata\n   */\n  // async getMetadata(\n  //   id: string\n  // ): Promise<\n  //   | {\n  //       data: Metadata\n  //       error: null\n  //     }\n  //   | {\n  //       data: null\n  //       error: StorageError\n  //     }\n  // > {\n  //   try {\n  //     const data = await get(this.fetch, `${this.url}/metadata/${id}`, { headers: this.headers })\n  //     return { data, error: null }\n  //   } catch (error) {\n  //     if (isStorageError(error)) {\n  //       return { data: null, error }\n  //     }\n\n  //     throw error\n  //   }\n  // }\n\n  /**\n   * Update file metadata\n   * @param id the file id to update metadata\n   * @param meta the new file metadata\n   */\n  // async updateMetadata(\n  //   id: string,\n  //   meta: Metadata\n  // ): Promise<\n  //   | {\n  //       data: Metadata\n  //       error: null\n  //     }\n  //   | {\n  //       data: null\n  //       error: StorageError\n  //     }\n  // > {\n  //   try {\n  //     const data = await post(\n  //       this.fetch,\n  //       `${this.url}/metadata/${id}`,\n  //       { ...meta },\n  //       { headers: this.headers }\n  //     )\n  //     return { data, error: null }\n  //   } catch (error) {\n  //     if (isStorageError(error)) {\n  //       return { data: null, error }\n  //     }\n\n  //     throw error\n  //   }\n  // }\n\n  /**\n   * Lists all the files within a bucket.\n   * @param path The folder path.\n   */\n  async list(\n    path?: string,\n    options?: SearchOptions,\n    parameters?: FetchParameters\n  ): Promise<\n    | {\n        data: FileObject[]\n        error: null\n      }\n    | {\n        data: null\n        error: StorageError\n      }\n  > {\n    try {\n      const body = { ...DEFAULT_SEARCH_OPTIONS, ...options, prefix: path || '' }\n      const data = await post(\n        this.fetch,\n        `${this.url}/object/list/${this.bucketId}`,\n        body,\n        { headers: this.headers },\n        parameters\n      )\n      return { data, error: null }\n    } catch (error) {\n      if (isStorageError(error)) {\n        return { data: null, error }\n      }\n\n      throw error\n    }\n  }\n\n  private _getFinalPath(path: string) {\n    return `${this.bucketId}/${path}`\n  }\n\n  private _removeEmptyFolders(path: string) {\n    return path.replace(/^\\/|\\/$/g, '').replace(/\\/+/g, '/')\n  }\n\n  private transformOptsToQueryString(transform: TransformOptions) {\n    const params = []\n    if (transform.width) {\n      params.push(`width=${transform.width}`)\n    }\n\n    if (transform.height) {\n      params.push(`height=${transform.height}`)\n    }\n\n    if (transform.resize) {\n      params.push(`resize=${transform.resize}`)\n    }\n\n    if (transform.format) {\n      params.push(`format=${transform.format}`)\n    }\n\n    if (transform.quality) {\n      params.push(`quality=${transform.quality}`)\n    }\n\n    return params.join('&')\n  }\n}\n"]},"metadata":{},"sourceType":"module"}