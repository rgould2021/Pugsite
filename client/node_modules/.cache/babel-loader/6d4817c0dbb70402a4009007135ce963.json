{"ast":null,"code":"var _jsxFileName = \"/Users/rickygould/Downloads/web102_unit7lab-main/client/src/pages/ReadPosts.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport Card from '../components/Card';\nimport { supabase } from '../client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ReadPosts = () => {\n  _s();\n\n  const [posts, setPosts] = useState([]);\n  const [sortByTime, setSortByTime] = useState(false);\n  const [sortByUpvotes, setSortByUpvotes] = useState(false);\n  useEffect(() => {\n    const fetchPosts = async () => {\n      let {\n        data\n      } = await supabase.from('Posts').select('id, title, author, description, image, created_at, upvotes'); // Apply sorting based on selected options\n\n      if (sortByTime) {\n        data = data.sort((a, b) => new Date(b.created_at) - new Date(a.created_at));\n      }\n\n      if (sortByUpvotes) {\n        data = data.sort((a, b) => b.upvotes - a.upvotes);\n      }\n\n      setPosts(data);\n    };\n\n    fetchPosts();\n  }, [sortByTime, sortByUpvotes]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"ReadPosts\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Sort by created time:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          checked: sortByTime,\n          onChange: () => setSortByTime(!sortByTime)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Sort by upvotes:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          checked: sortByUpvotes,\n          onChange: () => setSortByUpvotes(!sortByUpvotes)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }, this), posts.map(post => /*#__PURE__*/_jsxDEV(Link, {\n      to: `/post/${post.id}`,\n      children: /*#__PURE__*/_jsxDEV(Card, {\n        id: post.id,\n        title: post.title,\n        author: post.author,\n        description: post.description,\n        image: post.image,\n        created_at: post.created_at\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 21\n      }, this)\n    }, post.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 17\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ReadPosts, \"k59IOKgs/uqYWVfaCmDdD+fkbx0=\");\n\n_c = ReadPosts;\nexport default ReadPosts;\n\nvar _c;\n\n$RefreshReg$(_c, \"ReadPosts\");","map":{"version":3,"names":["React","useState","useEffect","Link","Card","supabase","ReadPosts","posts","setPosts","sortByTime","setSortByTime","sortByUpvotes","setSortByUpvotes","fetchPosts","data","from","select","sort","a","b","Date","created_at","upvotes","map","post","id","title","author","description","image"],"sources":["/Users/rickygould/Downloads/web102_unit7lab-main/client/src/pages/ReadPosts.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport Card from '../components/Card';\nimport { supabase } from '../client';\n\nconst ReadPosts = () => {\n    const [posts, setPosts] = useState([]);\n    const [sortByTime, setSortByTime] = useState(false);\n    const [sortByUpvotes, setSortByUpvotes] = useState(false);\n\n    useEffect(() => {\n        const fetchPosts = async () => {\n            let { data } = await supabase.from('Posts').select('id, title, author, description, image, created_at, upvotes');\n            \n            // Apply sorting based on selected options\n            if (sortByTime) {\n                data = data.sort((a, b) => new Date(b.created_at) - new Date(a.created_at));\n            }\n            if (sortByUpvotes) {\n                data = data.sort((a, b) => b.upvotes - a.upvotes);\n            }\n\n            setPosts(data);\n        };\n\n        fetchPosts();\n    }, [sortByTime, sortByUpvotes]);\n\n    return (\n        <div className=\"ReadPosts\">\n            <div>\n                <label>\n                    Sort by created time:\n                    <input\n                        type=\"checkbox\"\n                        checked={sortByTime}\n                        onChange={() => setSortByTime(!sortByTime)}\n                    />\n                </label>\n                <label>\n                    Sort by upvotes:\n                    <input\n                        type=\"checkbox\"\n                        checked={sortByUpvotes}\n                        onChange={() => setSortByUpvotes(!sortByUpvotes)}\n                    />\n                </label>\n            </div>\n            {posts.map((post) => (\n                <Link key={post.id} to={`/post/${post.id}`}>\n                    <Card\n                        id={post.id}\n                        title={post.title}\n                        author={post.author}\n                        description={post.description}\n                        image={post.image}\n                        created_at={post.created_at}\n                    />\n                </Link>\n            ))}\n        </div>\n    );\n};\n\nexport default ReadPosts;\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,SAASC,QAAT,QAAyB,WAAzB;;;AAEA,MAAMC,SAAS,GAAG,MAAM;EAAA;;EACpB,MAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAC,EAAD,CAAlC;EACA,MAAM,CAACQ,UAAD,EAAaC,aAAb,IAA8BT,QAAQ,CAAC,KAAD,CAA5C;EACA,MAAM,CAACU,aAAD,EAAgBC,gBAAhB,IAAoCX,QAAQ,CAAC,KAAD,CAAlD;EAEAC,SAAS,CAAC,MAAM;IACZ,MAAMW,UAAU,GAAG,YAAY;MAC3B,IAAI;QAAEC;MAAF,IAAW,MAAMT,QAAQ,CAACU,IAAT,CAAc,OAAd,EAAuBC,MAAvB,CAA8B,4DAA9B,CAArB,CAD2B,CAG3B;;MACA,IAAIP,UAAJ,EAAgB;QACZK,IAAI,GAAGA,IAAI,CAACG,IAAL,CAAU,CAACC,CAAD,EAAIC,CAAJ,KAAU,IAAIC,IAAJ,CAASD,CAAC,CAACE,UAAX,IAAyB,IAAID,IAAJ,CAASF,CAAC,CAACG,UAAX,CAA7C,CAAP;MACH;;MACD,IAAIV,aAAJ,EAAmB;QACfG,IAAI,GAAGA,IAAI,CAACG,IAAL,CAAU,CAACC,CAAD,EAAIC,CAAJ,KAAUA,CAAC,CAACG,OAAF,GAAYJ,CAAC,CAACI,OAAlC,CAAP;MACH;;MAEDd,QAAQ,CAACM,IAAD,CAAR;IACH,CAZD;;IAcAD,UAAU;EACb,CAhBQ,EAgBN,CAACJ,UAAD,EAAaE,aAAb,CAhBM,CAAT;EAkBA,oBACI;IAAK,SAAS,EAAC,WAAf;IAAA,wBACI;MAAA,wBACI;QAAA,iDAEI;UACI,IAAI,EAAC,UADT;UAEI,OAAO,EAAEF,UAFb;UAGI,QAAQ,EAAE,MAAMC,aAAa,CAAC,CAACD,UAAF;QAHjC;UAAA;UAAA;UAAA;QAAA,QAFJ;MAAA;QAAA;QAAA;QAAA;MAAA,QADJ,eASI;QAAA,4CAEI;UACI,IAAI,EAAC,UADT;UAEI,OAAO,EAAEE,aAFb;UAGI,QAAQ,EAAE,MAAMC,gBAAgB,CAAC,CAACD,aAAF;QAHpC;UAAA;UAAA;UAAA;QAAA,QAFJ;MAAA;QAAA;QAAA;QAAA;MAAA,QATJ;IAAA;MAAA;MAAA;MAAA;IAAA,QADJ,EAmBKJ,KAAK,CAACgB,GAAN,CAAWC,IAAD,iBACP,QAAC,IAAD;MAAoB,EAAE,EAAG,SAAQA,IAAI,CAACC,EAAG,EAAzC;MAAA,uBACI,QAAC,IAAD;QACI,EAAE,EAAED,IAAI,CAACC,EADb;QAEI,KAAK,EAAED,IAAI,CAACE,KAFhB;QAGI,MAAM,EAAEF,IAAI,CAACG,MAHjB;QAII,WAAW,EAAEH,IAAI,CAACI,WAJtB;QAKI,KAAK,EAAEJ,IAAI,CAACK,KALhB;QAMI,UAAU,EAAEL,IAAI,CAACH;MANrB;QAAA;QAAA;QAAA;MAAA;IADJ,GAAWG,IAAI,CAACC,EAAhB;MAAA;MAAA;MAAA;IAAA,QADH,CAnBL;EAAA;IAAA;IAAA;IAAA;EAAA,QADJ;AAkCH,CAzDD;;GAAMnB,S;;KAAAA,S;AA2DN,eAAeA,SAAf"},"metadata":{},"sourceType":"module"}